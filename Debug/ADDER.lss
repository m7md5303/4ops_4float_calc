
ADDER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002820  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  00002820  00002894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001968  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c30  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  0000534a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  000079d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  00008ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000a154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000a334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000a62f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b039  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <main>
      7a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e8       	ldi	r26, 0x86	; 134
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e8       	ldi	r24, 0x86	; 134
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e8       	ldi	r22, 0x86	; 134
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	e2 57       	subi	r30, 0x72	; 114
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <CLCD_voidSendData>:
#include"CLCD_interface.h"
#include"CLCD_private.h"



void CLCD_voidSendData(u8 Copy_u8Data){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	2f 97       	sbiw	r28, 0x0f	; 15
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	8f 87       	std	Y+15, r24	; 0x0f
	//high to receive data
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RS_PIN ,DIO_u8HIGH);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
    //low to write
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RW_PIN,DIO_u8LOW);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
    //data received writing
DIO_VoidSetPortValue(CLCD_DATAPORT,Copy_u8Data);
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	6f 85       	ldd	r22, Y+15	; 0x0f
     e76:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_VoidSetPortValue>
    //enable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8HIGH);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	4f ef       	ldi	r20, 0xFF	; 255
     e80:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e4       	ldi	r27, 0x40	; 64
     e8c:	8b 87       	std	Y+11, r24	; 0x0b
     e8e:	9c 87       	std	Y+12, r25	; 0x0c
     e90:	ad 87       	std	Y+13, r26	; 0x0d
     e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a ef       	ldi	r20, 0xFA	; 250
     ea2:	54 e4       	ldi	r21, 0x44	; 68
     ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8f 83       	std	Y+7, r24	; 0x07
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	a9 87       	std	Y+9, r26	; 0x09
     eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb4:	6f 81       	ldd	r22, Y+7	; 0x07
     eb6:	78 85       	ldd	r23, Y+8	; 0x08
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
     ec8:	88 23       	and	r24, r24
     eca:	2c f4       	brge	.+10     	; 0xed6 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
     eea:	18 16       	cp	r1, r24
     eec:	4c f5       	brge	.+82     	; 0xf40 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e 83       	std	Y+6, r25	; 0x06
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <CLCD_voidSendData+0xee>
     f18:	88 ec       	ldi	r24, 0xC8	; 200
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <CLCD_voidSendData+0xdc>
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	69 f7       	brne	.-38     	; 0xf18 <CLCD_voidSendData+0xd0>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	6f 81       	ldd	r22, Y+7	; 0x07
     f42:	78 85       	ldd	r23, Y+8	; 0x08
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <CLCD_voidSendData+0x118>
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
//disable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8LOW);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>

}
     f72:	2f 96       	adiw	r28, 0x0f	; 15
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8Command){
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	2f 97       	sbiw	r28, 0x0f	; 15
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	8f 87       	std	Y+15, r24	; 0x0f
	//low to receive command
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RS_PIN ,DIO_u8LOW);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
    //low to write
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RW_PIN,DIO_u8LOW);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
    //data received writing
DIO_VoidSetPortValue(CLCD_DATAPORT,Copy_u8Command);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	6f 85       	ldd	r22, Y+15	; 0x0f
     fb2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_VoidSetPortValue>
    //enable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8HIGH);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	4f ef       	ldi	r20, 0xFF	; 255
     fbc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e0       	ldi	r26, 0x00	; 0
     fc6:	b0 e4       	ldi	r27, 0x40	; 64
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a ef       	ldi	r20, 0xFA	; 250
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <CLCD_voidSendCommand+0xee>
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <CLCD_voidSendCommand+0xdc>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <CLCD_voidSendCommand+0xd0>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <CLCD_voidSendCommand+0x118>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
//disable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8LOW);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>

}
    10ae:	2f 96       	adiw	r28, 0x0f	; 15
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <CLCD_voidInit>:
void CLCD_voidInit(void){
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	ac e1       	ldi	r26, 0x1C	; 28
    10da:	b2 e4       	ldi	r27, 0x42	; 66
    10dc:	8b 87       	std	Y+11, r24	; 0x0b
    10de:	9c 87       	std	Y+12, r25	; 0x0c
    10e0:	ad 87       	std	Y+13, r26	; 0x0d
    10e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a ef       	ldi	r20, 0xFA	; 250
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8f 83       	std	Y+7, r24	; 0x07
    10fe:	98 87       	std	Y+8, r25	; 0x08
    1100:	a9 87       	std	Y+9, r26	; 0x09
    1102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1104:	6f 81       	ldd	r22, Y+7	; 0x07
    1106:	78 85       	ldd	r23, Y+8	; 0x08
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <CLCD_voidInit+0x66>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9e 83       	std	Y+6, r25	; 0x06
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1126:	6f 81       	ldd	r22, Y+7	; 0x07
    1128:	78 85       	ldd	r23, Y+8	; 0x08
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1140:	7c 85       	ldd	r23, Y+12	; 0x0c
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	9e 85       	ldd	r25, Y+14	; 0x0e
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <CLCD_voidInit+0xc6>
    1168:	88 ec       	ldi	r24, 0xC8	; 200
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <CLCD_voidInit+0xb4>
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f7       	brne	.-38     	; 0x1168 <CLCD_voidInit+0xa8>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	8d 83       	std	Y+5, r24	; 0x05
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <CLCD_voidInit+0xf0>
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(39);
	CLCD_voidSendCommand(0b00111000);
    11b8:	88 e3       	ldi	r24, 0x38	; 56
    11ba:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(0b00001111);
    11be:	8f e0       	ldi	r24, 0x0F	; 15
    11c0:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(0b00000001);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendCommand>
}
    11ca:	2e 96       	adiw	r28, 0x0e	; 14
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <CLCD_voidSendString>:


void CLCD_voidSendString(u8 * Copy_pu8String){
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <CLCD_voidSendString+0x6>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <CLCD_voidSendString+0x30>
	while(Copy_pu8String[i]!='\0'){
		CLCD_voidSendData(Copy_pu8String[i]);
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	fc 01       	movw	r30, r24
    11fc:	e2 0f       	add	r30, r18
    11fe:	f3 1f       	adc	r31, r19
    1200:	80 81       	ld	r24, Z
    1202:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
		i=i+1;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01
}


void CLCD_voidSendString(u8 * Copy_pu8String){
	u8 i=0;
	while(Copy_pu8String[i]!='\0'){
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	fc 01       	movw	r30, r24
    1218:	e2 0f       	add	r30, r18
    121a:	f3 1f       	adc	r31, r19
    121c:	80 81       	ld	r24, Z
    121e:	88 23       	and	r24, r24
    1220:	39 f7       	brne	.-50     	; 0x11f0 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pu8String[i]);
		i=i+1;
	}
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <CLCD_voidSetXYPosition>:
void CLCD_voidSetXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <CLCD_voidSetXYPosition+0x6>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8YPosition==0){
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 23       	and	r24, r24
    1242:	19 f4       	brne	.+6      	; 0x124a <CLCD_voidSetXYPosition+0x1c>
		Local_u8Address=Copy_u8XPosition;
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <CLCD_voidSetXYPosition+0x22>
	}
	else{
		Local_u8Address=Copy_u8XPosition+0x40;
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 5c       	subi	r24, 0xC0	; 192
    124e:	89 83       	std	Y+1, r24	; 0x01
	}
	SET_BIT(Local_u8Address,7);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Address);
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendCommand>
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void){
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendCommand>
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <CLCD_s32AdderPower>:

s32 CLCD_s32AdderPower(u8 Copy_u8Power){
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	29 97       	sbiw	r28, 0x09	; 9
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Power==0){
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	88 23       	and	r24, r24
    1296:	49 f4       	brne	.+18     	; 0x12aa <CLCD_s32AdderPower+0x2e>
		return 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	8e 83       	std	Y+6, r24	; 0x06
    12a2:	9f 83       	std	Y+7, r25	; 0x07
    12a4:	a8 87       	std	Y+8, r26	; 0x08
    12a6:	b9 87       	std	Y+9, r27	; 0x09
    12a8:	1c c0       	rjmp	.+56     	; 0x12e2 <CLCD_s32AdderPower+0x66>
	}
	else{
		s32 result= 10* (CLCD_s32AdderPower(Copy_u8Power-1));
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	0e 94 3e 09 	call	0x127c	; 0x127c <CLCD_s32AdderPower>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__mulsi3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	ab 83       	std	Y+3, r26	; 0x03
    12d0:	bc 83       	std	Y+4, r27	; 0x04
        return result;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	ab 81       	ldd	r26, Y+3	; 0x03
    12d8:	bc 81       	ldd	r27, Y+4	; 0x04
    12da:	8e 83       	std	Y+6, r24	; 0x06
    12dc:	9f 83       	std	Y+7, r25	; 0x07
    12de:	a8 87       	std	Y+8, r26	; 0x08
    12e0:	b9 87       	std	Y+9, r27	; 0x09
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	a8 85       	ldd	r26, Y+8	; 0x08
    12e8:	b9 85       	ldd	r27, Y+9	; 0x09
	}
}
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	29 96       	adiw	r28, 0x09	; 9
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <CLCD_s32AdderNegativePower>:
f32 CLCD_s32AdderNegativePower(u8 Copy_u8NegativePower){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
		return(1.0/(CLCD_s32AdderPower(Copy_u8NegativePower)));
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	0e 94 3e 09 	call	0x127c	; 0x127c <CLCD_s32AdderPower>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    131e:	9b 01       	movw	r18, r22
    1320:	ac 01       	movw	r20, r24
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	80 e8       	ldi	r24, 0x80	; 128
    1328:	9f e3       	ldi	r25, 0x3F	; 63
    132a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
}
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction ){
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	27 97       	sbiw	r28, 0x07	; 7
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
    1356:	4b 83       	std	Y+3, r20	; 0x03

if(Copy_u8Direction==DIO_u8INPUT){
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 23       	and	r24, r24
    135c:	09 f0       	breq	.+2      	; 0x1360 <DIO_voidSetPinDirection+0x22>
    135e:	75 c0       	rjmp	.+234    	; 0x144a <DIO_voidSetPinDirection+0x10c>
	switch(Copy_u8Port){
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3f 83       	std	Y+7, r19	; 0x07
    1368:	2e 83       	std	Y+6, r18	; 0x06
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	9f 81       	ldd	r25, Y+7	; 0x07
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	61 f1       	breq	.+88     	; 0x13cc <DIO_voidSetPinDirection+0x8e>
    1374:	2e 81       	ldd	r18, Y+6	; 0x06
    1376:	3f 81       	ldd	r19, Y+7	; 0x07
    1378:	23 30       	cpi	r18, 0x03	; 3
    137a:	31 05       	cpc	r19, r1
    137c:	34 f4       	brge	.+12     	; 0x138a <DIO_voidSetPinDirection+0x4c>
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	69 f0       	breq	.+26     	; 0x13a2 <DIO_voidSetPinDirection+0x64>
    1388:	d3 c0       	rjmp	.+422    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
    138a:	2e 81       	ldd	r18, Y+6	; 0x06
    138c:	3f 81       	ldd	r19, Y+7	; 0x07
    138e:	23 30       	cpi	r18, 0x03	; 3
    1390:	31 05       	cpc	r19, r1
    1392:	89 f1       	breq	.+98     	; 0x13f6 <DIO_voidSetPinDirection+0xb8>
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	9f 81       	ldd	r25, Y+7	; 0x07
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <DIO_voidSetPinDirection+0x62>
    139e:	40 c0       	rjmp	.+128    	; 0x1420 <DIO_voidSetPinDirection+0xe2>
    13a0:	c7 c0       	rjmp	.+398    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTA: CLR_BIT(DDRA , Copy_u8Pin); break;
    13a2:	aa e3       	ldi	r26, 0x3A	; 58
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_voidSetPinDirection+0x82>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_voidSetPinDirection+0x7e>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	b2 c0       	rjmp	.+356    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTB: CLR_BIT(DDRB , Copy_u8Pin); break;
    13cc:	a7 e3       	ldi	r26, 0x37	; 55
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_voidSetPinDirection+0xac>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_voidSetPinDirection+0xa8>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	9d c0       	rjmp	.+314    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTC: CLR_BIT(DDRC , Copy_u8Pin); break;
    13f6:	a4 e3       	ldi	r26, 0x34	; 52
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_voidSetPinDirection+0xd6>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_voidSetPinDirection+0xd2>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	88 c0       	rjmp	.+272    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTD: CLR_BIT(DDRD , Copy_u8Pin); break;
    1420:	a1 e3       	ldi	r26, 0x31	; 49
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e1 e3       	ldi	r30, 0x31	; 49
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_voidSetPinDirection+0x100>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_voidSetPinDirection+0xfc>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	73 c0       	rjmp	.+230    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	}
}
else if(Copy_u8Direction==DIO_u8OUTPUT){
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	09 f0       	breq	.+2      	; 0x1452 <DIO_voidSetPinDirection+0x114>
    1450:	6f c0       	rjmp	.+222    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
	switch(Copy_u8Port){
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3d 83       	std	Y+5, r19	; 0x05
    145a:	2c 83       	std	Y+4, r18	; 0x04
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	51 f1       	breq	.+84     	; 0x14ba <DIO_voidSetPinDirection+0x17c>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	23 30       	cpi	r18, 0x03	; 3
    146c:	31 05       	cpc	r19, r1
    146e:	34 f4       	brge	.+12     	; 0x147c <DIO_voidSetPinDirection+0x13e>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIO_voidSetPinDirection+0x154>
    147a:	5a c0       	rjmp	.+180    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	23 30       	cpi	r18, 0x03	; 3
    1482:	31 05       	cpc	r19, r1
    1484:	71 f1       	breq	.+92     	; 0x14e2 <DIO_voidSetPinDirection+0x1a4>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	91 05       	cpc	r25, r1
    148e:	e9 f1       	breq	.+122    	; 0x150a <DIO_voidSetPinDirection+0x1cc>
    1490:	4f c0       	rjmp	.+158    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTA: SET_BIT(DDRA , Copy_u8Pin); break;
    1492:	aa e3       	ldi	r26, 0x3A	; 58
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ea e3       	ldi	r30, 0x3A	; 58
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_voidSetPinDirection+0x172>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_voidSetPinDirection+0x16e>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	3b c0       	rjmp	.+118    	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB: SET_BIT(DDRB , Copy_u8Pin); break;
    14ba:	a7 e3       	ldi	r26, 0x37	; 55
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e7 e3       	ldi	r30, 0x37	; 55
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_voidSetPinDirection+0x19a>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_voidSetPinDirection+0x196>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	27 c0       	rjmp	.+78     	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC: SET_BIT(DDRC , Copy_u8Pin); break;
    14e2:	a4 e3       	ldi	r26, 0x34	; 52
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e3       	ldi	r30, 0x34	; 52
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_voidSetPinDirection+0x1c2>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_voidSetPinDirection+0x1be>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD: SET_BIT(DDRD , Copy_u8Pin); break;
    150a:	a1 e3       	ldi	r26, 0x31	; 49
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e1 e3       	ldi	r30, 0x31	; 49
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_voidSetPinDirection+0x1ea>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_voidSetPinDirection+0x1e6>
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
		}
}
}
    1530:	27 96       	adiw	r28, 0x07	; 7
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ){
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	27 97       	sbiw	r28, 0x07	; 7
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	6a 83       	std	Y+2, r22	; 0x02
    155a:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value==DIO_u8LOW){
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	88 23       	and	r24, r24
    1560:	09 f0       	breq	.+2      	; 0x1564 <DIO_voidSetPinValue+0x22>
    1562:	75 c0       	rjmp	.+234    	; 0x164e <DIO_voidSetPinValue+0x10c>
		switch(Copy_u8Port){
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3f 83       	std	Y+7, r19	; 0x07
    156c:	2e 83       	std	Y+6, r18	; 0x06
    156e:	8e 81       	ldd	r24, Y+6	; 0x06
    1570:	9f 81       	ldd	r25, Y+7	; 0x07
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 05       	cpc	r25, r1
    1576:	61 f1       	breq	.+88     	; 0x15d0 <DIO_voidSetPinValue+0x8e>
    1578:	2e 81       	ldd	r18, Y+6	; 0x06
    157a:	3f 81       	ldd	r19, Y+7	; 0x07
    157c:	23 30       	cpi	r18, 0x03	; 3
    157e:	31 05       	cpc	r19, r1
    1580:	34 f4       	brge	.+12     	; 0x158e <DIO_voidSetPinValue+0x4c>
    1582:	8e 81       	ldd	r24, Y+6	; 0x06
    1584:	9f 81       	ldd	r25, Y+7	; 0x07
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	69 f0       	breq	.+26     	; 0x15a6 <DIO_voidSetPinValue+0x64>
    158c:	d3 c0       	rjmp	.+422    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
    158e:	2e 81       	ldd	r18, Y+6	; 0x06
    1590:	3f 81       	ldd	r19, Y+7	; 0x07
    1592:	23 30       	cpi	r18, 0x03	; 3
    1594:	31 05       	cpc	r19, r1
    1596:	89 f1       	breq	.+98     	; 0x15fa <DIO_voidSetPinValue+0xb8>
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <DIO_voidSetPinValue+0x62>
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <DIO_voidSetPinValue+0xe2>
    15a4:	c7 c0       	rjmp	.+398    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTA: CLR_BIT(PORTA , Copy_u8Pin); break;
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_voidSetPinValue+0x82>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_voidSetPinValue+0x7e>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	b2 c0       	rjmp	.+356    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB: CLR_BIT(PORTB , Copy_u8Pin); break;
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_voidSetPinValue+0xac>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_voidSetPinValue+0xa8>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	9d c0       	rjmp	.+314    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC: CLR_BIT(PORTC , Copy_u8Pin); break;
    15fa:	a5 e3       	ldi	r26, 0x35	; 53
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_voidSetPinValue+0xd6>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_voidSetPinValue+0xd2>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	88 c0       	rjmp	.+272    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD: CLR_BIT(PORTD , Copy_u8Pin); break;
    1624:	a2 e3       	ldi	r26, 0x32	; 50
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_voidSetPinValue+0x100>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_voidSetPinValue+0xfc>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	73 c0       	rjmp	.+230    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH){
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	8f 3f       	cpi	r24, 0xFF	; 255
    1652:	09 f0       	breq	.+2      	; 0x1656 <DIO_voidSetPinValue+0x114>
    1654:	6f c0       	rjmp	.+222    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
		switch(Copy_u8Port){
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3d 83       	std	Y+5, r19	; 0x05
    165e:	2c 83       	std	Y+4, r18	; 0x04
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	91 05       	cpc	r25, r1
    1668:	51 f1       	breq	.+84     	; 0x16be <DIO_voidSetPinValue+0x17c>
    166a:	2c 81       	ldd	r18, Y+4	; 0x04
    166c:	3d 81       	ldd	r19, Y+5	; 0x05
    166e:	23 30       	cpi	r18, 0x03	; 3
    1670:	31 05       	cpc	r19, r1
    1672:	34 f4       	brge	.+12     	; 0x1680 <DIO_voidSetPinValue+0x13e>
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_voidSetPinValue+0x154>
    167e:	5a c0       	rjmp	.+180    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	23 30       	cpi	r18, 0x03	; 3
    1686:	31 05       	cpc	r19, r1
    1688:	71 f1       	breq	.+92     	; 0x16e6 <DIO_voidSetPinValue+0x1a4>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	84 30       	cpi	r24, 0x04	; 4
    1690:	91 05       	cpc	r25, r1
    1692:	e9 f1       	breq	.+122    	; 0x170e <DIO_voidSetPinValue+0x1cc>
    1694:	4f c0       	rjmp	.+158    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTA: SET_BIT(PORTA , Copy_u8Pin); break;
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_voidSetPinValue+0x172>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_voidSetPinValue+0x16e>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	3b c0       	rjmp	.+118    	; 0x1734 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTB: SET_BIT(PORTB , Copy_u8Pin); break;
    16be:	a8 e3       	ldi	r26, 0x38	; 56
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e8 e3       	ldi	r30, 0x38	; 56
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_voidSetPinValue+0x19a>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_voidSetPinValue+0x196>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTC: SET_BIT(PORTC , Copy_u8Pin); break;
    16e6:	a5 e3       	ldi	r26, 0x35	; 53
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_voidSetPinValue+0x1c2>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_voidSetPinValue+0x1be>
    1708:	84 2b       	or	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTD: SET_BIT(PORTD , Copy_u8Pin); break;
    170e:	a2 e3       	ldi	r26, 0x32	; 50
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e2 e3       	ldi	r30, 0x32	; 50
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_voidSetPinValue+0x1ea>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_voidSetPinValue+0x1e6>
    1730:	84 2b       	or	r24, r20
    1732:	8c 93       	st	X, r24
			}
	}

}
    1734:	27 96       	adiw	r28, 0x07	; 7
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <DIO_VoidSetPortDirection+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_VoidSetPortDirection+0x8>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	6a 83       	std	Y+2, r22	; 0x02
switch(Copy_u8Port){
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3c 83       	std	Y+4, r19	; 0x04
    175e:	2b 83       	std	Y+3, r18	; 0x03
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	91 05       	cpc	r25, r1
    1768:	d9 f0       	breq	.+54     	; 0x17a0 <DIO_VoidSetPortDirection+0x5a>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	31 05       	cpc	r19, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <DIO_VoidSetPortDirection+0x3a>
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <DIO_VoidSetPortDirection+0x50>
    177e:	1e c0       	rjmp	.+60     	; 0x17bc <DIO_VoidSetPortDirection+0x76>
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	3c 81       	ldd	r19, Y+4	; 0x04
    1784:	23 30       	cpi	r18, 0x03	; 3
    1786:	31 05       	cpc	r19, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <DIO_VoidSetPortDirection+0x64>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	91 05       	cpc	r25, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <DIO_VoidSetPortDirection+0x6e>
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTA : DDRA= Copy_u8Direction; break;
    1796:	ea e3       	ldi	r30, 0x3A	; 58
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 83       	st	Z, r24
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTB : DDRB= Copy_u8Direction; break;
    17a0:	e7 e3       	ldi	r30, 0x37	; 55
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	80 83       	st	Z, r24
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTC : DDRC= Copy_u8Direction; break;
    17aa:	e4 e3       	ldi	r30, 0x34	; 52
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 83       	st	Z, r24
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTD : DDRD= Copy_u8Direction; break;
    17b4:	e1 e3       	ldi	r30, 0x31	; 49
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 83       	st	Z, r24

}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DIO_VoidSetPortValue+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <DIO_VoidSetPortValue+0x8>
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3c 83       	std	Y+4, r19	; 0x04
    17e2:	2b 83       	std	Y+3, r18	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	91 05       	cpc	r25, r1
    17ec:	d9 f0       	breq	.+54     	; 0x1824 <DIO_VoidSetPortValue+0x5a>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	31 05       	cpc	r19, r1
    17f6:	34 f4       	brge	.+12     	; 0x1804 <DIO_VoidSetPortValue+0x3a>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	61 f0       	breq	.+24     	; 0x181a <DIO_VoidSetPortValue+0x50>
    1802:	1e c0       	rjmp	.+60     	; 0x1840 <DIO_VoidSetPortValue+0x76>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	23 30       	cpi	r18, 0x03	; 3
    180a:	31 05       	cpc	r19, r1
    180c:	81 f0       	breq	.+32     	; 0x182e <DIO_VoidSetPortValue+0x64>
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	91 05       	cpc	r25, r1
    1816:	81 f0       	breq	.+32     	; 0x1838 <DIO_VoidSetPortValue+0x6e>
    1818:	13 c0       	rjmp	.+38     	; 0x1840 <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTA : PORTA= Copy_u8Value; break;
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	80 83       	st	Z, r24
    1822:	0e c0       	rjmp	.+28     	; 0x1840 <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTB : PORTB= Copy_u8Value; break;
    1824:	e8 e3       	ldi	r30, 0x38	; 56
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTC : PORTC= Copy_u8Value; break;
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	80 83       	st	Z, r24
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTD : PORTD= Copy_u8Value; break;
    1838:	e2 e3       	ldi	r30, 0x32	; 50
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24

	}
	}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_u8GetPinValue+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <DIO_u8GetPinValue+0x8>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port){
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	4c 81       	ldd	r20, Y+4	; 0x04
    186c:	5d 81       	ldd	r21, Y+5	; 0x05
    186e:	42 30       	cpi	r20, 0x02	; 2
    1870:	51 05       	cpc	r21, r1
    1872:	41 f1       	breq	.+80     	; 0x18c4 <DIO_u8GetPinValue+0x76>
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	34 f4       	brge	.+12     	; 0x188a <DIO_u8GetPinValue+0x3c>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	21 30       	cpi	r18, 0x01	; 1
    1884:	31 05       	cpc	r19, r1
    1886:	61 f0       	breq	.+24     	; 0x18a0 <DIO_u8GetPinValue+0x52>
    1888:	52 c0       	rjmp	.+164    	; 0x192e <DIO_u8GetPinValue+0xe0>
    188a:	4c 81       	ldd	r20, Y+4	; 0x04
    188c:	5d 81       	ldd	r21, Y+5	; 0x05
    188e:	43 30       	cpi	r20, 0x03	; 3
    1890:	51 05       	cpc	r21, r1
    1892:	51 f1       	breq	.+84     	; 0x18e8 <DIO_u8GetPinValue+0x9a>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	91 05       	cpc	r25, r1
    189c:	b9 f1       	breq	.+110    	; 0x190c <DIO_u8GetPinValue+0xbe>
    189e:	47 c0       	rjmp	.+142    	; 0x192e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTA: Local_u8Result=GET_BIT(PINA , Copy_u8Pin);       break;
    18a0:	e9 e3       	ldi	r30, 0x39	; 57
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_u8GetPinValue+0x6a>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_u8GetPinValue+0x66>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	35 c0       	rjmp	.+106    	; 0x192e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTB: Local_u8Result=GET_BIT(PINB , Copy_u8Pin);       break;
    18c4:	e6 e3       	ldi	r30, 0x36	; 54
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_u8GetPinValue+0x8e>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_u8GetPinValue+0x8a>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	23 c0       	rjmp	.+70     	; 0x192e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTC: Local_u8Result=GET_BIT(PINC , Copy_u8Pin);       break;
    18e8:	e3 e3       	ldi	r30, 0x33	; 51
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_u8GetPinValue+0xb2>
    18fc:	55 95       	asr	r21
    18fe:	47 95       	ror	r20
    1900:	8a 95       	dec	r24
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_u8GetPinValue+0xae>
    1904:	ca 01       	movw	r24, r20
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	11 c0       	rjmp	.+34     	; 0x192e <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTD: Local_u8Result=GET_BIT(PIND , Copy_u8Pin);       break;
    190c:	e0 e3       	ldi	r30, 0x30	; 48
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_u8GetPinValue+0xd6>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_u8GetPinValue+0xd2>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    192e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <KPD_u8GetPressedKey>:

#include"KPD_config.h"
#include"KPD_private.h"
#include"KPD_interface.h"

u8 KPD_u8GetPressedKey(void){
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	a6 97       	sbiw	r28, 0x26	; 38
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61

u8 arr[4][4]={{1,2,3,4},
		      {5,6,7,8},
			  {9,10,11,12},
			  {13,14,15,16}};
    1954:	ce 01       	movw	r24, r28
    1956:	42 96       	adiw	r24, 0x12	; 18
    1958:	9b a3       	std	Y+35, r25	; 0x23
    195a:	8a a3       	std	Y+34, r24	; 0x22
    195c:	ee e8       	ldi	r30, 0x8E	; 142
    195e:	f1 e0       	ldi	r31, 0x01	; 1
    1960:	fd a3       	std	Y+37, r31	; 0x25
    1962:	ec a3       	std	Y+36, r30	; 0x24
    1964:	f0 e1       	ldi	r31, 0x10	; 16
    1966:	fe a3       	std	Y+38, r31	; 0x26
    1968:	ec a1       	ldd	r30, Y+36	; 0x24
    196a:	fd a1       	ldd	r31, Y+37	; 0x25
    196c:	00 80       	ld	r0, Z
    196e:	8c a1       	ldd	r24, Y+36	; 0x24
    1970:	9d a1       	ldd	r25, Y+37	; 0x25
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	9d a3       	std	Y+37, r25	; 0x25
    1976:	8c a3       	std	Y+36, r24	; 0x24
    1978:	ea a1       	ldd	r30, Y+34	; 0x22
    197a:	fb a1       	ldd	r31, Y+35	; 0x23
    197c:	00 82       	st	Z, r0
    197e:	8a a1       	ldd	r24, Y+34	; 0x22
    1980:	9b a1       	ldd	r25, Y+35	; 0x23
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	9b a3       	std	Y+35, r25	; 0x23
    1986:	8a a3       	std	Y+34, r24	; 0x22
    1988:	9e a1       	ldd	r25, Y+38	; 0x26
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	9e a3       	std	Y+38, r25	; 0x26
    198e:	ee a1       	ldd	r30, Y+38	; 0x26
    1990:	ee 23       	and	r30, r30
    1992:	51 f7       	brne	.-44     	; 0x1968 <KPD_u8GetPressedKey+0x28>
	u8 Local_u8Key=23;
    1994:	87 e1       	ldi	r24, 0x17	; 23
    1996:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 col=0;col<4;col++){
    1998:	18 8a       	std	Y+16, r1	; 0x10
    199a:	af c0       	rjmp	.+350    	; 0x1afa <KPD_u8GetPressedKey+0x1ba>
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8LOW);
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	68 89       	ldd	r22, Y+16	; 0x10
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
		for(u8 row=0;row<4;row++){
    19a6:	1f 86       	std	Y+15, r1	; 0x0f
    19a8:	9c c0       	rjmp	.+312    	; 0x1ae2 <KPD_u8GetPressedKey+0x1a2>
			if((DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW)){
    19aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ac:	98 2f       	mov	r25, r24
    19ae:	9c 5f       	subi	r25, 0xFC	; 252
    19b0:	84 e0       	ldi	r24, 0x04	; 4
    19b2:	69 2f       	mov	r22, r25
    19b4:	0e 94 27 0c 	call	0x184e	; 0x184e <DIO_u8GetPinValue>
    19b8:	88 23       	and	r24, r24
    19ba:	09 f0       	breq	.+2      	; 0x19be <KPD_u8GetPressedKey+0x7e>
    19bc:	8f c0       	rjmp	.+286    	; 0x1adc <KPD_u8GetPressedKey+0x19c>
				Local_u8Key=arr[row][col];
    19be:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	88 89       	ldd	r24, Y+16	; 0x10
    19c6:	48 2f       	mov	r20, r24
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	ce 01       	movw	r24, r28
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	84 0f       	add	r24, r20
    19dc:	95 1f       	adc	r25, r21
    19de:	fc 01       	movw	r30, r24
    19e0:	71 96       	adiw	r30, 0x11	; 17
    19e2:	80 81       	ld	r24, Z
    19e4:	89 8b       	std	Y+17, r24	; 0x11
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	b0 e4       	ldi	r27, 0x40	; 64
    19ee:	8b 87       	std	Y+11, r24	; 0x0b
    19f0:	9c 87       	std	Y+12, r25	; 0x0c
    19f2:	ad 87       	std	Y+13, r26	; 0x0d
    19f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
    1a10:	98 87       	std	Y+8, r25	; 0x08
    1a12:	a9 87       	std	Y+9, r26	; 0x09
    1a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <KPD_u8GetPressedKey+0xf8>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <KPD_u8GetPressedKey+0x176>
	else if (__tmp > 65535)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <KPD_u8GetPressedKey+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <KPD_u8GetPressedKey+0x158>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <KPD_u8GetPressedKey+0x146>
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <KPD_u8GetPressedKey+0x13a>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <KPD_u8GetPressedKey+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <KPD_u8GetPressedKey+0x182>
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2);
				while(DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW){
    1aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1acc:	98 2f       	mov	r25, r24
    1ace:	9c 5f       	subi	r25, 0xFC	; 252
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	69 2f       	mov	r22, r25
    1ad4:	0e 94 27 0c 	call	0x184e	; 0x184e <DIO_u8GetPinValue>
    1ad8:	88 23       	and	r24, r24
    1ada:	b9 f3       	breq	.-18     	; 0x1aca <KPD_u8GetPressedKey+0x18a>
			  {9,10,11,12},
			  {13,14,15,16}};
	u8 Local_u8Key=23;
	for(u8 col=0;col<4;col++){
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8LOW);
		for(u8 row=0;row<4;row++){
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <KPD_u8GetPressedKey+0x1aa>
    1ae8:	60 cf       	rjmp	.-320    	; 0x19aa <KPD_u8GetPressedKey+0x6a>
				while(DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW){

				}
			}
		}
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8HIGH);
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	68 89       	ldd	r22, Y+16	; 0x10
    1aee:	4f ef       	ldi	r20, 0xFF	; 255
    1af0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DIO_voidSetPinValue>
u8 arr[4][4]={{1,2,3,4},
		      {5,6,7,8},
			  {9,10,11,12},
			  {13,14,15,16}};
	u8 Local_u8Key=23;
	for(u8 col=0;col<4;col++){
    1af4:	88 89       	ldd	r24, Y+16	; 0x10
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	88 8b       	std	Y+16, r24	; 0x10
    1afa:	88 89       	ldd	r24, Y+16	; 0x10
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <KPD_u8GetPressedKey+0x1c2>
    1b00:	4d cf       	rjmp	.-358    	; 0x199c <KPD_u8GetPressedKey+0x5c>
				}
			}
		}
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8HIGH);
	}
return Local_u8Key-1;
    1b02:	89 89       	ldd	r24, Y+17	; 0x11
    1b04:	81 50       	subi	r24, 0x01	; 1

}
    1b06:	a6 96       	adiw	r28, 0x26	; 38
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <main>:
#include "KPD_private.h"
#include "KPD_interface.h"
#include "KPD_config.h"
#include <util/delay.h>

int main(void){
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	c2 58       	subi	r28, 0x82	; 130
    1b2a:	d0 40       	sbci	r29, 0x00	; 0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
DIO_VoidSetPortDirection(DIO_u8PORTD,0b00001111);
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	6f e0       	ldi	r22, 0x0F	; 15
    1b3a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_VoidSetPortDirection>
DIO_VoidSetPortValue(DIO_u8PORTD,0b11111111);
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	6f ef       	ldi	r22, 0xFF	; 255
    1b42:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_VoidSetPortValue>
DIO_VoidSetPortDirection(DIO_u8PORTB,0b11111111);
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	6f ef       	ldi	r22, 0xFF	; 255
    1b4a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_VoidSetPortDirection>
DIO_VoidSetPortDirection(DIO_u8PORTA,0b11111111);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	6f ef       	ldi	r22, 0xFF	; 255
    1b52:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_VoidSetPortDirection>

CLCD_voidInit();
    1b56:	0e 94 60 08 	call	0x10c0	; 0x10c0 <CLCD_voidInit>
u8 neg_flag=0,err_flag=0;
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ed 5b       	subi	r30, 0xBD	; 189
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	10 82       	st	Z, r1
    1b62:	fe 01       	movw	r30, r28
    1b64:	ee 5b       	subi	r30, 0xBE	; 190
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	10 82       	st	Z, r1
f32 sum=0,sum_tmp=0;
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	fe 96       	adiw	r30, 0x3e	; 62
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	80 83       	st	Z, r24
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	a2 83       	std	Z+2, r26	; 0x02
    1b7c:	b3 83       	std	Z+3, r27	; 0x03
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	8a af       	std	Y+58, r24	; 0x3a
    1b88:	9b af       	std	Y+59, r25	; 0x3b
    1b8a:	ac af       	std	Y+60, r26	; 0x3c
    1b8c:	bd af       	std	Y+61, r27	; 0x3d
s32 int_sum=0,dec_sum=0,int_sum_tmp=0,dec_sum_tmp=0;
    1b8e:	1e aa       	std	Y+54, r1	; 0x36
    1b90:	1f aa       	std	Y+55, r1	; 0x37
    1b92:	18 ae       	std	Y+56, r1	; 0x38
    1b94:	19 ae       	std	Y+57, r1	; 0x39
    1b96:	1a aa       	std	Y+50, r1	; 0x32
    1b98:	1b aa       	std	Y+51, r1	; 0x33
    1b9a:	1c aa       	std	Y+52, r1	; 0x34
    1b9c:	1d aa       	std	Y+53, r1	; 0x35
    1b9e:	1e a6       	std	Y+46, r1	; 0x2e
    1ba0:	1f a6       	std	Y+47, r1	; 0x2f
    1ba2:	18 aa       	std	Y+48, r1	; 0x30
    1ba4:	19 aa       	std	Y+49, r1	; 0x31
    1ba6:	1a a6       	std	Y+42, r1	; 0x2a
    1ba8:	1b a6       	std	Y+43, r1	; 0x2b
    1baa:	1c a6       	std	Y+44, r1	; 0x2c
    1bac:	1d a6       	std	Y+45, r1	; 0x2d
u8 i,digit_count,float_count,operation=0;
    1bae:	1e a2       	std	Y+38, r1	; 0x26
f32 operand=0;
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e0       	ldi	r26, 0x00	; 0
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	8a a3       	std	Y+34, r24	; 0x22
    1bba:	9b a3       	std	Y+35, r25	; 0x23
    1bbc:	ac a3       	std	Y+36, r26	; 0x24
    1bbe:	bd a3       	std	Y+37, r27	; 0x25
u8 foperand=0;
    1bc0:	19 a2       	std	Y+33, r1	; 0x21
u8 press=0;
    1bc2:	18 a2       	std	Y+32, r1	; 0x20
u8 operandarr[16]={0},floatarr[16]={0};
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	8c 5b       	subi	r24, 0xBC	; 188
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	20 e1       	ldi	r18, 0x10	; 16
    1bcc:	fc 01       	movw	r30, r24
    1bce:	df 01       	movw	r26, r30
    1bd0:	32 2f       	mov	r19, r18
    1bd2:	1d 92       	st	X+, r1
    1bd4:	3a 95       	dec	r19
    1bd6:	e9 f7       	brne	.-6      	; 0x1bd2 <main+0xba>
    1bd8:	ce 01       	movw	r24, r28
    1bda:	8c 5a       	subi	r24, 0xAC	; 172
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	20 e1       	ldi	r18, 0x10	; 16
    1be0:	fc 01       	movw	r30, r24
    1be2:	df 01       	movw	r26, r30
    1be4:	32 2f       	mov	r19, r18
    1be6:	1d 92       	st	X+, r1
    1be8:	3a 95       	dec	r19
    1bea:	e9 f7       	brne	.-6      	; 0x1be6 <main+0xce>
u8 printed_data [16]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
    1bec:	ce 01       	movw	r24, r28
    1bee:	8c 59       	subi	r24, 0x9C	; 156
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	c2 58       	subi	r28, 0x82	; 130
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	99 83       	std	Y+1, r25	; 0x01
    1bf8:	88 83       	st	Y, r24
    1bfa:	ce 57       	subi	r28, 0x7E	; 126
    1bfc:	d0 40       	sbci	r29, 0x00	; 0
    1bfe:	8e e9       	ldi	r24, 0x9E	; 158
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	c0 58       	subi	r28, 0x80	; 128
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	99 83       	std	Y+1, r25	; 0x01
    1c08:	88 83       	st	Y, r24
    1c0a:	c0 58       	subi	r28, 0x80	; 128
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	90 e1       	ldi	r25, 0x10	; 16
    1c10:	ce 57       	subi	r28, 0x7E	; 126
    1c12:	df 4f       	sbci	r29, 0xFF	; 255
    1c14:	98 83       	st	Y, r25
    1c16:	c2 58       	subi	r28, 0x82	; 130
    1c18:	d0 40       	sbci	r29, 0x00	; 0
    1c1a:	c0 58       	subi	r28, 0x80	; 128
    1c1c:	df 4f       	sbci	r29, 0xFF	; 255
    1c1e:	a8 81       	ld	r26, Y
    1c20:	b9 81       	ldd	r27, Y+1	; 0x01
    1c22:	c0 58       	subi	r28, 0x80	; 128
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	0c 90       	ld	r0, X
    1c28:	c0 58       	subi	r28, 0x80	; 128
    1c2a:	df 4f       	sbci	r29, 0xFF	; 255
    1c2c:	e8 81       	ld	r30, Y
    1c2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c30:	c0 58       	subi	r28, 0x80	; 128
    1c32:	d0 40       	sbci	r29, 0x00	; 0
    1c34:	31 96       	adiw	r30, 0x01	; 1
    1c36:	c0 58       	subi	r28, 0x80	; 128
    1c38:	df 4f       	sbci	r29, 0xFF	; 255
    1c3a:	f9 83       	std	Y+1, r31	; 0x01
    1c3c:	e8 83       	st	Y, r30
    1c3e:	c0 58       	subi	r28, 0x80	; 128
    1c40:	d0 40       	sbci	r29, 0x00	; 0
    1c42:	c2 58       	subi	r28, 0x82	; 130
    1c44:	df 4f       	sbci	r29, 0xFF	; 255
    1c46:	a8 81       	ld	r26, Y
    1c48:	b9 81       	ldd	r27, Y+1	; 0x01
    1c4a:	ce 57       	subi	r28, 0x7E	; 126
    1c4c:	d0 40       	sbci	r29, 0x00	; 0
    1c4e:	0c 92       	st	X, r0
    1c50:	c2 58       	subi	r28, 0x82	; 130
    1c52:	df 4f       	sbci	r29, 0xFF	; 255
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	ce 57       	subi	r28, 0x7E	; 126
    1c5a:	d0 40       	sbci	r29, 0x00	; 0
    1c5c:	31 96       	adiw	r30, 0x01	; 1
    1c5e:	c2 58       	subi	r28, 0x82	; 130
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    1c62:	f9 83       	std	Y+1, r31	; 0x01
    1c64:	e8 83       	st	Y, r30
    1c66:	ce 57       	subi	r28, 0x7E	; 126
    1c68:	d0 40       	sbci	r29, 0x00	; 0
    1c6a:	ce 57       	subi	r28, 0x7E	; 126
    1c6c:	df 4f       	sbci	r29, 0xFF	; 255
    1c6e:	f8 81       	ld	r31, Y
    1c70:	c2 58       	subi	r28, 0x82	; 130
    1c72:	d0 40       	sbci	r29, 0x00	; 0
    1c74:	f1 50       	subi	r31, 0x01	; 1
    1c76:	ce 57       	subi	r28, 0x7E	; 126
    1c78:	df 4f       	sbci	r29, 0xFF	; 255
    1c7a:	f8 83       	st	Y, r31
    1c7c:	c2 58       	subi	r28, 0x82	; 130
    1c7e:	d0 40       	sbci	r29, 0x00	; 0
    1c80:	ce 57       	subi	r28, 0x7E	; 126
    1c82:	df 4f       	sbci	r29, 0xFF	; 255
    1c84:	28 81       	ld	r18, Y
    1c86:	c2 58       	subi	r28, 0x82	; 130
    1c88:	d0 40       	sbci	r29, 0x00	; 0
    1c8a:	22 23       	and	r18, r18
    1c8c:	31 f6       	brne	.-116    	; 0x1c1a <main+0x102>
u8 fprinted_data [4]={'0','0','0','0'};
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ec 58       	subi	r30, 0x8C	; 140
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 e3       	ldi	r24, 0x30	; 48
    1c96:	80 83       	st	Z, r24
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ec 58       	subi	r30, 0x8C	; 140
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 e3       	ldi	r24, 0x30	; 48
    1ca0:	81 83       	std	Z+1, r24	; 0x01
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ec 58       	subi	r30, 0x8C	; 140
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 e3       	ldi	r24, 0x30	; 48
    1caa:	82 83       	std	Z+2, r24	; 0x02
    1cac:	fe 01       	movw	r30, r28
    1cae:	ec 58       	subi	r30, 0x8C	; 140
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	83 83       	std	Z+3, r24	; 0x03
u8 float_state=0;
    1cb6:	1f 8e       	std	Y+31, r1	; 0x1f
    digit_count=0;
    1cb8:	18 a6       	std	Y+40, r1	; 0x28
    float_count=0;
    1cba:	1f a2       	std	Y+39, r1	; 0x27
    for(u8 j =0;j<16;j++){
    1cbc:	1e 8e       	std	Y+30, r1	; 0x1e
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <main+0x1c6>
            	CLCD_voidSendData(printed_data[j]);
    1cc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	8c 59       	subi	r24, 0x9C	; 156
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
u8 printed_data [16]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
u8 fprinted_data [4]={'0','0','0','0'};
u8 float_state=0;
    digit_count=0;
    float_count=0;
    for(u8 j =0;j<16;j++){
    1cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	8e 8f       	std	Y+30, r24	; 0x1e
    1cde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ce0:	80 31       	cpi	r24, 0x10	; 16
    1ce2:	70 f3       	brcs	.-36     	; 0x1cc0 <main+0x1a8>
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <main+0x1d4>
            	CLCD_voidSendData(printed_data[j]);
            }
    while(1){//choosing the operation
    while((operation!=13)&&(operation!=12)&&(operation!=14)&&(operation!=15)){
    	operation=KPD_u8GetPressedKey();
    1ce6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <KPD_u8GetPressedKey>
    1cea:	8e a3       	std	Y+38, r24	; 0x26
    float_count=0;
    for(u8 j =0;j<16;j++){
            	CLCD_voidSendData(printed_data[j]);
            }
    while(1){//choosing the operation
    while((operation!=13)&&(operation!=12)&&(operation!=14)&&(operation!=15)){
    1cec:	8e a1       	ldd	r24, Y+38	; 0x26
    1cee:	8d 30       	cpi	r24, 0x0D	; 13
    1cf0:	49 f0       	breq	.+18     	; 0x1d04 <main+0x1ec>
    1cf2:	8e a1       	ldd	r24, Y+38	; 0x26
    1cf4:	8c 30       	cpi	r24, 0x0C	; 12
    1cf6:	31 f0       	breq	.+12     	; 0x1d04 <main+0x1ec>
    1cf8:	8e a1       	ldd	r24, Y+38	; 0x26
    1cfa:	8e 30       	cpi	r24, 0x0E	; 14
    1cfc:	19 f0       	breq	.+6      	; 0x1d04 <main+0x1ec>
    1cfe:	8e a1       	ldd	r24, Y+38	; 0x26
    1d00:	8f 30       	cpi	r24, 0x0F	; 15
    1d02:	89 f7       	brne	.-30     	; 0x1ce6 <main+0x1ce>
    	operation=KPD_u8GetPressedKey();
    }
    CLCD_voidClearDisplay();
    1d04:	0e 94 34 09 	call	0x1268	; 0x1268 <CLCD_voidClearDisplay>
    switch (operation) {
    1d08:	8e a1       	ldd	r24, Y+38	; 0x26
    1d0a:	a8 2f       	mov	r26, r24
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	ee 96       	adiw	r28, 0x3e	; 62
    1d10:	bf af       	std	Y+63, r27	; 0x3f
    1d12:	ae af       	std	Y+62, r26	; 0x3e
    1d14:	ee 97       	sbiw	r28, 0x3e	; 62
    1d16:	ee 96       	adiw	r28, 0x3e	; 62
    1d18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d1c:	ee 97       	sbiw	r28, 0x3e	; 62
    1d1e:	ed 30       	cpi	r30, 0x0D	; 13
    1d20:	f1 05       	cpc	r31, r1
    1d22:	39 f1       	breq	.+78     	; 0x1d72 <main+0x25a>
    1d24:	ee 96       	adiw	r28, 0x3e	; 62
    1d26:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d28:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d2a:	ee 97       	sbiw	r28, 0x3e	; 62
    1d2c:	2e 30       	cpi	r18, 0x0E	; 14
    1d2e:	31 05       	cpc	r19, r1
    1d30:	44 f4       	brge	.+16     	; 0x1d42 <main+0x22a>
    1d32:	ee 96       	adiw	r28, 0x3e	; 62
    1d34:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d36:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d38:	ee 97       	sbiw	r28, 0x3e	; 62
    1d3a:	8c 30       	cpi	r24, 0x0C	; 12
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	f1 f0       	breq	.+60     	; 0x1d7c <main+0x264>
    1d40:	21 c0       	rjmp	.+66     	; 0x1d84 <main+0x26c>
    1d42:	ee 96       	adiw	r28, 0x3e	; 62
    1d44:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d46:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d48:	ee 97       	sbiw	r28, 0x3e	; 62
    1d4a:	ae 30       	cpi	r26, 0x0E	; 14
    1d4c:	b1 05       	cpc	r27, r1
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <main+0x250>
    1d50:	ee 96       	adiw	r28, 0x3e	; 62
    1d52:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d54:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d56:	ee 97       	sbiw	r28, 0x3e	; 62
    1d58:	ef 30       	cpi	r30, 0x0F	; 15
    1d5a:	f1 05       	cpc	r31, r1
    1d5c:	99 f4       	brne	.+38     	; 0x1d84 <main+0x26c>
		case 15:
			CLCD_voidSendString("PLUS");
    1d5e:	80 e6       	ldi	r24, 0x60	; 96
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CLCD_voidSendString>
    1d66:	0e c0       	rjmp	.+28     	; 0x1d84 <main+0x26c>
			break;
		case 14:
			CLCD_voidSendString("MINUS");
    1d68:	85 e6       	ldi	r24, 0x65	; 101
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CLCD_voidSendString>
    1d70:	09 c0       	rjmp	.+18     	; 0x1d84 <main+0x26c>
			break;
		case 13:
			CLCD_voidSendString("MULTIPLY");
    1d72:	8b e6       	ldi	r24, 0x6B	; 107
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CLCD_voidSendString>
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <main+0x26c>
			break;
		case 12:
		    CLCD_voidSendString("DIVIDE");
    1d7c:	84 e7       	ldi	r24, 0x74	; 116
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CLCD_voidSendString>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	aa ef       	ldi	r26, 0xFA	; 250
    1d8a:	b3 e4       	ldi	r27, 0x43	; 67
    1d8c:	89 8f       	std	Y+25, r24	; 0x19
    1d8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d90:	ab 8f       	std	Y+27, r26	; 0x1b
    1d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	69 8d       	ldd	r22, Y+25	; 0x19
    1d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a ef       	ldi	r20, 0xFA	; 250
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8d 8b       	std	Y+21, r24	; 0x15
    1dae:	9e 8b       	std	Y+22, r25	; 0x16
    1db0:	af 8b       	std	Y+23, r26	; 0x17
    1db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <main+0x2be>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <main+0x33c>
	else if (__tmp > 65535)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	69 8d       	ldd	r22, Y+25	; 0x19
    1df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <main+0x31e>
    1e18:	88 ec       	ldi	r24, 0xC8	; 200
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a 8b       	std	Y+18, r25	; 0x12
    1e1e:	89 8b       	std	Y+17, r24	; 0x11
    1e20:	89 89       	ldd	r24, Y+17	; 0x11
    1e22:	9a 89       	ldd	r25, Y+18	; 0x12
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <main+0x30c>
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <main+0x300>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6d 89       	ldd	r22, Y+21	; 0x15
    1e42:	7e 89       	ldd	r23, Y+22	; 0x16
    1e44:	8f 89       	ldd	r24, Y+23	; 0x17
    1e46:	98 8d       	ldd	r25, Y+24	; 0x18
    1e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
    1e54:	8b 89       	ldd	r24, Y+19	; 0x13
    1e56:	9c 89       	ldd	r25, Y+20	; 0x14
    1e58:	98 8b       	std	Y+16, r25	; 0x10
    1e5a:	8f 87       	std	Y+15, r24	; 0x0f
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	98 89       	ldd	r25, Y+16	; 0x10
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <main+0x348>
    1e64:	98 8b       	std	Y+16, r25	; 0x10
    1e66:	8f 87       	std	Y+15, r24	; 0x0f
		    break;
	}
    _delay_ms(500);
    CLCD_voidClearDisplay();
    1e68:	0e 94 34 09 	call	0x1268	; 0x1268 <CLCD_voidClearDisplay>
    1e6c:	57 c0       	rjmp	.+174    	; 0x1f1c <main+0x404>
    while(press!=11){//getting the operand from the user
    press=KPD_u8GetPressedKey();
    1e6e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <KPD_u8GetPressedKey>
    1e72:	88 a3       	std	Y+32, r24	; 0x20
    if(press==14&&(!(neg_flag))){
    1e74:	88 a1       	ldd	r24, Y+32	; 0x20
    1e76:	8e 30       	cpi	r24, 0x0E	; 14
    1e78:	71 f4       	brne	.+28     	; 0x1e96 <main+0x37e>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 5b       	subi	r30, 0xBD	; 189
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	88 23       	and	r24, r24
    1e84:	41 f4       	brne	.+16     	; 0x1e96 <main+0x37e>
    	CLCD_voidSendData('-');
    1e86:	8d e2       	ldi	r24, 0x2D	; 45
    1e88:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
    	neg_flag=1;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ed 5b       	subi	r30, 0xBD	; 189
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	80 83       	st	Z, r24
    }
    if(press==10){//getting the float part
    1e96:	88 a1       	ldd	r24, Y+32	; 0x20
    1e98:	8a 30       	cpi	r24, 0x0A	; 10
    1e9a:	31 f4       	brne	.+12     	; 0x1ea8 <main+0x390>
    	CLCD_voidSendData('.');
    1e9c:	8e e2       	ldi	r24, 0x2E	; 46
    1e9e:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
    	float_state++;
    1ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	8f 8f       	std	Y+31, r24	; 0x1f
    }
    if(float_state==1){
    1ea8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	e1 f4       	brne	.+56     	; 0x1ee6 <main+0x3ce>
    	  if((press!=11)&&(press>=0)&&(press<10)&&(press!=10)){
    1eae:	88 a1       	ldd	r24, Y+32	; 0x20
    1eb0:	8b 30       	cpi	r24, 0x0B	; 11
    1eb2:	a1 f1       	breq	.+104    	; 0x1f1c <main+0x404>
    1eb4:	88 a1       	ldd	r24, Y+32	; 0x20
    1eb6:	8a 30       	cpi	r24, 0x0A	; 10
    1eb8:	88 f5       	brcc	.+98     	; 0x1f1c <main+0x404>
    1eba:	88 a1       	ldd	r24, Y+32	; 0x20
    1ebc:	8a 30       	cpi	r24, 0x0A	; 10
    1ebe:	71 f1       	breq	.+92     	; 0x1f1c <main+0x404>
    	    floatarr[float_count]=press;
    1ec0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	8c 5a       	subi	r24, 0xAC	; 172
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ed4:	80 83       	st	Z, r24
    	    CLCD_voidSendData(press+48);
    1ed6:	88 a1       	ldd	r24, Y+32	; 0x20
    1ed8:	80 5d       	subi	r24, 0xD0	; 208
    1eda:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
    	    float_count++;}
    1ede:	8f a1       	ldd	r24, Y+39	; 0x27
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	8f a3       	std	Y+39, r24	; 0x27
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <main+0x404>
    }

    else{    //getting the integer part

    if((press!=11)&&(press>=0)&&(press<10)&&(press!=12)){
    1ee6:	88 a1       	ldd	r24, Y+32	; 0x20
    1ee8:	8b 30       	cpi	r24, 0x0B	; 11
    1eea:	c1 f0       	breq	.+48     	; 0x1f1c <main+0x404>
    1eec:	88 a1       	ldd	r24, Y+32	; 0x20
    1eee:	8a 30       	cpi	r24, 0x0A	; 10
    1ef0:	a8 f4       	brcc	.+42     	; 0x1f1c <main+0x404>
    1ef2:	88 a1       	ldd	r24, Y+32	; 0x20
    1ef4:	8c 30       	cpi	r24, 0x0C	; 12
    1ef6:	91 f0       	breq	.+36     	; 0x1f1c <main+0x404>
    operandarr[digit_count]=press;
    1ef8:	88 a5       	ldd	r24, Y+40	; 0x28
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	ce 01       	movw	r24, r28
    1f00:	8c 5b       	subi	r24, 0xBC	; 188
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	fc 01       	movw	r30, r24
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	88 a1       	ldd	r24, Y+32	; 0x20
    1f0c:	80 83       	st	Z, r24
    CLCD_voidSendData(press+48);
    1f0e:	88 a1       	ldd	r24, Y+32	; 0x20
    1f10:	80 5d       	subi	r24, 0xD0	; 208
    1f12:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
    digit_count++;}}}
    1f16:	88 a5       	ldd	r24, Y+40	; 0x28
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	88 a7       	std	Y+40, r24	; 0x28
		    CLCD_voidSendString("DIVIDE");
		    break;
	}
    _delay_ms(500);
    CLCD_voidClearDisplay();
    while(press!=11){//getting the operand from the user
    1f1c:	88 a1       	ldd	r24, Y+32	; 0x20
    1f1e:	8b 30       	cpi	r24, 0x0B	; 11
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <main+0x40c>
    1f22:	a5 cf       	rjmp	.-182    	; 0x1e6e <main+0x356>

    if((press!=11)&&(press>=0)&&(press<10)&&(press!=12)){
    operandarr[digit_count]=press;
    CLCD_voidSendData(press+48);
    digit_count++;}}}
    u8 counter=0;//storing the integer part
    1f24:	1d 8e       	std	Y+29, r1	; 0x1d
    1f26:	32 c0       	rjmp	.+100    	; 0x1f8c <main+0x474>
    while(digit_count!=0){
    	operand=operand+(operandarr[counter]*CLCD_s32AdderPower(digit_count-1));
    1f28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	ce 01       	movw	r24, r28
    1f30:	8c 5b       	subi	r24, 0xBC	; 188
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	fc 01       	movw	r30, r24
    1f36:	e2 0f       	add	r30, r18
    1f38:	f3 1f       	adc	r31, r19
    1f3a:	80 81       	ld	r24, Z
    1f3c:	e8 2e       	mov	r14, r24
    1f3e:	ff 24       	eor	r15, r15
    1f40:	00 e0       	ldi	r16, 0x00	; 0
    1f42:	10 e0       	ldi	r17, 0x00	; 0
    1f44:	88 a5       	ldd	r24, Y+40	; 0x28
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	0e 94 3e 09 	call	0x127c	; 0x127c <CLCD_s32AdderPower>
    1f4c:	9b 01       	movw	r18, r22
    1f4e:	ac 01       	movw	r20, r24
    1f50:	c8 01       	movw	r24, r16
    1f52:	b7 01       	movw	r22, r14
    1f54:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__mulsi3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    1f64:	9b 01       	movw	r18, r22
    1f66:	ac 01       	movw	r20, r24
    1f68:	6a a1       	ldd	r22, Y+34	; 0x22
    1f6a:	7b a1       	ldd	r23, Y+35	; 0x23
    1f6c:	8c a1       	ldd	r24, Y+36	; 0x24
    1f6e:	9d a1       	ldd	r25, Y+37	; 0x25
    1f70:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8a a3       	std	Y+34, r24	; 0x22
    1f7a:	9b a3       	std	Y+35, r25	; 0x23
    1f7c:	ac a3       	std	Y+36, r26	; 0x24
    1f7e:	bd a3       	std	Y+37, r27	; 0x25
    	counter++;
    1f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	8d 8f       	std	Y+29, r24	; 0x1d
    	digit_count--;
    1f86:	88 a5       	ldd	r24, Y+40	; 0x28
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	88 a7       	std	Y+40, r24	; 0x28
    if((press!=11)&&(press>=0)&&(press<10)&&(press!=12)){
    operandarr[digit_count]=press;
    CLCD_voidSendData(press+48);
    digit_count++;}}}
    u8 counter=0;//storing the integer part
    while(digit_count!=0){
    1f8c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f8e:	88 23       	and	r24, r24
    1f90:	59 f6       	brne	.-106    	; 0x1f28 <main+0x410>
    	operand=operand+(operandarr[counter]*CLCD_s32AdderPower(digit_count-1));
    	counter++;
    	digit_count--;
    }
    counter=0;
    1f92:	1d 8e       	std	Y+29, r1	; 0x1d
    1f94:	36 c0       	rjmp	.+108    	; 0x2002 <main+0x4ea>

    while(float_count!=0){//storing the decimal part
        	operand=operand+(floatarr[counter]*CLCD_s32AdderNegativePower(counter+1));
    1f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	8c 5a       	subi	r24, 0xAC	; 172
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	aa 27       	eor	r26, r26
    1fb0:	97 fd       	sbrc	r25, 7
    1fb2:	a0 95       	com	r26
    1fb4:	ba 2f       	mov	r27, r26
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    1fbe:	7b 01       	movw	r14, r22
    1fc0:	8c 01       	movw	r16, r24
    1fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	0e 94 80 09 	call	0x1300	; 0x1300 <CLCD_s32AdderNegativePower>
    1fca:	9b 01       	movw	r18, r22
    1fcc:	ac 01       	movw	r20, r24
    1fce:	c8 01       	movw	r24, r16
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9c 01       	movw	r18, r24
    1fdc:	ad 01       	movw	r20, r26
    1fde:	6a a1       	ldd	r22, Y+34	; 0x22
    1fe0:	7b a1       	ldd	r23, Y+35	; 0x23
    1fe2:	8c a1       	ldd	r24, Y+36	; 0x24
    1fe4:	9d a1       	ldd	r25, Y+37	; 0x25
    1fe6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8a a3       	std	Y+34, r24	; 0x22
    1ff0:	9b a3       	std	Y+35, r25	; 0x23
    1ff2:	ac a3       	std	Y+36, r26	; 0x24
    1ff4:	bd a3       	std	Y+37, r27	; 0x25
        	counter++;
    1ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	8d 8f       	std	Y+29, r24	; 0x1d
        	float_count--;
    1ffc:	8f a1       	ldd	r24, Y+39	; 0x27
    1ffe:	81 50       	subi	r24, 0x01	; 1
    2000:	8f a3       	std	Y+39, r24	; 0x27
    	counter++;
    	digit_count--;
    }
    counter=0;

    while(float_count!=0){//storing the decimal part
    2002:	8f a1       	ldd	r24, Y+39	; 0x27
    2004:	88 23       	and	r24, r24
    2006:	39 f6       	brne	.-114    	; 0x1f96 <main+0x47e>
        	operand=operand+(floatarr[counter]*CLCD_s32AdderNegativePower(counter+1));
        	counter++;
        	float_count--;

        }
    if((operand==0)&&(operation==12)||((sum==0)&&(operand==12))){
    2008:	ec 96       	adiw	r28, 0x3c	; 60
    200a:	1f ae       	std	Y+63, r1	; 0x3f
    200c:	ec 97       	sbiw	r28, 0x3c	; 60
    200e:	6a a1       	ldd	r22, Y+34	; 0x22
    2010:	7b a1       	ldd	r23, Y+35	; 0x23
    2012:	8c a1       	ldd	r24, Y+36	; 0x24
    2014:	9d a1       	ldd	r25, Y+37	; 0x25
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2022:	88 23       	and	r24, r24
    2024:	21 f4       	brne	.+8      	; 0x202e <main+0x516>
    2026:	f1 e0       	ldi	r31, 0x01	; 1
    2028:	ec 96       	adiw	r28, 0x3c	; 60
    202a:	ff af       	std	Y+63, r31	; 0x3f
    202c:	ec 97       	sbiw	r28, 0x3c	; 60
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	ec 96       	adiw	r28, 0x3c	; 60
    2032:	2f ad       	ldd	r18, Y+63	; 0x3f
    2034:	ec 97       	sbiw	r28, 0x3c	; 60
    2036:	82 27       	eor	r24, r18
    2038:	88 23       	and	r24, r24
    203a:	19 f4       	brne	.+6      	; 0x2042 <main+0x52a>
    203c:	8e a1       	ldd	r24, Y+38	; 0x26
    203e:	8c 30       	cpi	r24, 0x0C	; 12
    2040:	51 f1       	breq	.+84     	; 0x2096 <main+0x57e>
    2042:	eb 96       	adiw	r28, 0x3b	; 59
    2044:	1f ae       	std	Y+63, r1	; 0x3f
    2046:	eb 97       	sbiw	r28, 0x3b	; 59
    2048:	fe 01       	movw	r30, r28
    204a:	fe 96       	adiw	r30, 0x3e	; 62
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2060:	88 23       	and	r24, r24
    2062:	21 f4       	brne	.+8      	; 0x206c <main+0x554>
    2064:	31 e0       	ldi	r19, 0x01	; 1
    2066:	eb 96       	adiw	r28, 0x3b	; 59
    2068:	3f af       	std	Y+63, r19	; 0x3f
    206a:	eb 97       	sbiw	r28, 0x3b	; 59
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	eb 96       	adiw	r28, 0x3b	; 59
    2070:	9f ad       	ldd	r25, Y+63	; 0x3f
    2072:	eb 97       	sbiw	r28, 0x3b	; 59
    2074:	89 27       	eor	r24, r25
    2076:	88 23       	and	r24, r24
    2078:	09 f0       	breq	.+2      	; 0x207c <main+0x564>
    207a:	8a c0       	rjmp	.+276    	; 0x2190 <main+0x678>
    207c:	6a a1       	ldd	r22, Y+34	; 0x22
    207e:	7b a1       	ldd	r23, Y+35	; 0x23
    2080:	8c a1       	ldd	r24, Y+36	; 0x24
    2082:	9d a1       	ldd	r25, Y+37	; 0x25
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e4       	ldi	r20, 0x40	; 64
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2090:	88 23       	and	r24, r24
    2092:	09 f0       	breq	.+2      	; 0x2096 <main+0x57e>
    2094:	7d c0       	rjmp	.+250    	; 0x2190 <main+0x678>
    	CLCD_voidClearDisplay();
    2096:	0e 94 34 09 	call	0x1268	; 0x1268 <CLCD_voidClearDisplay>
    	CLCD_voidSendString("MATH ERROR");
    209a:	8b e7       	ldi	r24, 0x7B	; 123
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CLCD_voidSendString>
    	err_flag=1;
    20a2:	fe 01       	movw	r30, r28
    20a4:	ee 5b       	subi	r30, 0xBE	; 190
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	80 83       	st	Z, r24
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	aa ef       	ldi	r26, 0xFA	; 250
    20b2:	b3 e4       	ldi	r27, 0x43	; 67
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <main+0x5e6>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <main+0x664>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <main+0x650>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <main+0x646>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <main+0x634>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <main+0x628>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <main+0x678>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <main+0x670>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(500);
    }

if(neg_flag){
    2190:	fe 01       	movw	r30, r28
    2192:	ed 5b       	subi	r30, 0xBD	; 189
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	88 23       	and	r24, r24
    219a:	49 f0       	breq	.+18     	; 0x21ae <main+0x696>
	operand=operand*-1;
    219c:	8a a1       	ldd	r24, Y+34	; 0x22
    219e:	9b a1       	ldd	r25, Y+35	; 0x23
    21a0:	ac a1       	ldd	r26, Y+36	; 0x24
    21a2:	bd a1       	ldd	r27, Y+37	; 0x25
    21a4:	b0 58       	subi	r27, 0x80	; 128
    21a6:	8a a3       	std	Y+34, r24	; 0x22
    21a8:	9b a3       	std	Y+35, r25	; 0x23
    21aa:	ac a3       	std	Y+36, r26	; 0x24
    21ac:	bd a3       	std	Y+37, r27	; 0x25
} if(!(err_flag)){
    21ae:	fe 01       	movw	r30, r28
    21b0:	ee 5b       	subi	r30, 0xBE	; 190
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	88 23       	and	r24, r24
    21b8:	09 f0       	breq	.+2      	; 0x21bc <main+0x6a4>
    21ba:	71 c0       	rjmp	.+226    	; 0x229e <main+0x786>
    //operating the operand
    switch (operation) {
    21bc:	8e a1       	ldd	r24, Y+38	; 0x26
    21be:	a8 2f       	mov	r26, r24
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ea 96       	adiw	r28, 0x3a	; 58
    21c4:	bf af       	std	Y+63, r27	; 0x3f
    21c6:	ae af       	std	Y+62, r26	; 0x3e
    21c8:	ea 97       	sbiw	r28, 0x3a	; 58
    21ca:	ea 96       	adiw	r28, 0x3a	; 58
    21cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    21ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    21d0:	ea 97       	sbiw	r28, 0x3a	; 58
    21d2:	ed 30       	cpi	r30, 0x0D	; 13
    21d4:	f1 05       	cpc	r31, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <main+0x6c2>
    21d8:	41 c0       	rjmp	.+130    	; 0x225c <main+0x744>
    21da:	ea 96       	adiw	r28, 0x3a	; 58
    21dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    21de:	3f ad       	ldd	r19, Y+63	; 0x3f
    21e0:	ea 97       	sbiw	r28, 0x3a	; 58
    21e2:	2e 30       	cpi	r18, 0x0E	; 14
    21e4:	31 05       	cpc	r19, r1
    21e6:	4c f4       	brge	.+18     	; 0x21fa <main+0x6e2>
    21e8:	ea 96       	adiw	r28, 0x3a	; 58
    21ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ee:	ea 97       	sbiw	r28, 0x3a	; 58
    21f0:	8c 30       	cpi	r24, 0x0C	; 12
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <main+0x6e0>
    21f6:	43 c0       	rjmp	.+134    	; 0x227e <main+0x766>
    21f8:	52 c0       	rjmp	.+164    	; 0x229e <main+0x786>
    21fa:	ea 96       	adiw	r28, 0x3a	; 58
    21fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    21fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2200:	ea 97       	sbiw	r28, 0x3a	; 58
    2202:	ae 30       	cpi	r26, 0x0E	; 14
    2204:	b1 05       	cpc	r27, r1
    2206:	c9 f0       	breq	.+50     	; 0x223a <main+0x722>
    2208:	ea 96       	adiw	r28, 0x3a	; 58
    220a:	ee ad       	ldd	r30, Y+62	; 0x3e
    220c:	ff ad       	ldd	r31, Y+63	; 0x3f
    220e:	ea 97       	sbiw	r28, 0x3a	; 58
    2210:	ef 30       	cpi	r30, 0x0F	; 15
    2212:	f1 05       	cpc	r31, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <main+0x700>
    2216:	43 c0       	rjmp	.+134    	; 0x229e <main+0x786>
		case 15:
		sum_tmp+=operand;
    2218:	6a ad       	ldd	r22, Y+58	; 0x3a
    221a:	7b ad       	ldd	r23, Y+59	; 0x3b
    221c:	8c ad       	ldd	r24, Y+60	; 0x3c
    221e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2220:	2a a1       	ldd	r18, Y+34	; 0x22
    2222:	3b a1       	ldd	r19, Y+35	; 0x23
    2224:	4c a1       	ldd	r20, Y+36	; 0x24
    2226:	5d a1       	ldd	r21, Y+37	; 0x25
    2228:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8a af       	std	Y+58, r24	; 0x3a
    2232:	9b af       	std	Y+59, r25	; 0x3b
    2234:	ac af       	std	Y+60, r26	; 0x3c
    2236:	bd af       	std	Y+61, r27	; 0x3d
    2238:	32 c0       	rjmp	.+100    	; 0x229e <main+0x786>
			break;
		case 14:
		sum_tmp-=operand;
    223a:	6a ad       	ldd	r22, Y+58	; 0x3a
    223c:	7b ad       	ldd	r23, Y+59	; 0x3b
    223e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2240:	9d ad       	ldd	r25, Y+61	; 0x3d
    2242:	2a a1       	ldd	r18, Y+34	; 0x22
    2244:	3b a1       	ldd	r19, Y+35	; 0x23
    2246:	4c a1       	ldd	r20, Y+36	; 0x24
    2248:	5d a1       	ldd	r21, Y+37	; 0x25
    224a:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8a af       	std	Y+58, r24	; 0x3a
    2254:	9b af       	std	Y+59, r25	; 0x3b
    2256:	ac af       	std	Y+60, r26	; 0x3c
    2258:	bd af       	std	Y+61, r27	; 0x3d
    225a:	21 c0       	rjmp	.+66     	; 0x229e <main+0x786>
		    break;
		case 13:
		sum_tmp*=operand;
    225c:	6a ad       	ldd	r22, Y+58	; 0x3a
    225e:	7b ad       	ldd	r23, Y+59	; 0x3b
    2260:	8c ad       	ldd	r24, Y+60	; 0x3c
    2262:	9d ad       	ldd	r25, Y+61	; 0x3d
    2264:	2a a1       	ldd	r18, Y+34	; 0x22
    2266:	3b a1       	ldd	r19, Y+35	; 0x23
    2268:	4c a1       	ldd	r20, Y+36	; 0x24
    226a:	5d a1       	ldd	r21, Y+37	; 0x25
    226c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8a af       	std	Y+58, r24	; 0x3a
    2276:	9b af       	std	Y+59, r25	; 0x3b
    2278:	ac af       	std	Y+60, r26	; 0x3c
    227a:	bd af       	std	Y+61, r27	; 0x3d
    227c:	10 c0       	rjmp	.+32     	; 0x229e <main+0x786>
		    break;
		case 12:
		sum_tmp/=operand;
    227e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2280:	7b ad       	ldd	r23, Y+59	; 0x3b
    2282:	8c ad       	ldd	r24, Y+60	; 0x3c
    2284:	9d ad       	ldd	r25, Y+61	; 0x3d
    2286:	2a a1       	ldd	r18, Y+34	; 0x22
    2288:	3b a1       	ldd	r19, Y+35	; 0x23
    228a:	4c a1       	ldd	r20, Y+36	; 0x24
    228c:	5d a1       	ldd	r21, Y+37	; 0x25
    228e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8a af       	std	Y+58, r24	; 0x3a
    2298:	9b af       	std	Y+59, r25	; 0x3b
    229a:	ac af       	std	Y+60, r26	; 0x3c
    229c:	bd af       	std	Y+61, r27	; 0x3d
		    break;
	}
}
    //giving the proper sign for the printed value
    if(sum_tmp>=0){
    229e:	6a ad       	ldd	r22, Y+58	; 0x3a
    22a0:	7b ad       	ldd	r23, Y+59	; 0x3b
    22a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    22a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
    22b2:	88 23       	and	r24, r24
    22b4:	5c f0       	brlt	.+22     	; 0x22cc <main+0x7b4>
    	sum=sum_tmp;
    22b6:	fe 01       	movw	r30, r28
    22b8:	fe 96       	adiw	r30, 0x3e	; 62
    22ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    22bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    22be:	ac ad       	ldd	r26, Y+60	; 0x3c
    22c0:	bd ad       	ldd	r27, Y+61	; 0x3d
    22c2:	80 83       	st	Z, r24
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	a2 83       	std	Z+2, r26	; 0x02
    22c8:	b3 83       	std	Z+3, r27	; 0x03
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <main+0x7ca>
    }
    else{
    	sum=(-1*sum_tmp);
    22cc:	fe 01       	movw	r30, r28
    22ce:	fe 96       	adiw	r30, 0x3e	; 62
    22d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    22d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    22d4:	ac ad       	ldd	r26, Y+60	; 0x3c
    22d6:	bd ad       	ldd	r27, Y+61	; 0x3d
    22d8:	b0 58       	subi	r27, 0x80	; 128
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
    }
    //getting the integer part and the floating part each alone

    int_sum_tmp=sum;
    22e2:	fe 01       	movw	r30, r28
    22e4:	fe 96       	adiw	r30, 0x3e	; 62
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8e a7       	std	Y+46, r24	; 0x2e
    22f8:	9f a7       	std	Y+47, r25	; 0x2f
    22fa:	a8 ab       	std	Y+48, r26	; 0x30
    22fc:	b9 ab       	std	Y+49, r27	; 0x31
    dec_sum_tmp=((sum-int_sum_tmp)*CLCD_s32AdderPower(4));
    22fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2300:	7f a5       	ldd	r23, Y+47	; 0x2f
    2302:	88 a9       	ldd	r24, Y+48	; 0x30
    2304:	99 a9       	ldd	r25, Y+49	; 0x31
    2306:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	fe 01       	movw	r30, r28
    2310:	fe 96       	adiw	r30, 0x3e	; 62
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	7c 01       	movw	r14, r24
    2324:	8d 01       	movw	r16, r26
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	0e 94 3e 09 	call	0x127c	; 0x127c <CLCD_s32AdderPower>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2338:	9b 01       	movw	r18, r22
    233a:	ac 01       	movw	r20, r24
    233c:	c8 01       	movw	r24, r16
    233e:	b7 01       	movw	r22, r14
    2340:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8a a7       	std	Y+42, r24	; 0x2a
    2356:	9b a7       	std	Y+43, r25	; 0x2b
    2358:	ac a7       	std	Y+44, r26	; 0x2c
    235a:	bd a7       	std	Y+45, r27	; 0x2d
    int_sum=int_sum_tmp;
    235c:	8e a5       	ldd	r24, Y+46	; 0x2e
    235e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2360:	a8 a9       	ldd	r26, Y+48	; 0x30
    2362:	b9 a9       	ldd	r27, Y+49	; 0x31
    2364:	8e ab       	std	Y+54, r24	; 0x36
    2366:	9f ab       	std	Y+55, r25	; 0x37
    2368:	a8 af       	std	Y+56, r26	; 0x38
    236a:	b9 af       	std	Y+57, r27	; 0x39
    dec_sum=dec_sum_tmp;
    236c:	8a a5       	ldd	r24, Y+42	; 0x2a
    236e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2370:	ac a5       	ldd	r26, Y+44	; 0x2c
    2372:	bd a5       	ldd	r27, Y+45	; 0x2d
    2374:	8a ab       	std	Y+50, r24	; 0x32
    2376:	9b ab       	std	Y+51, r25	; 0x33
    2378:	ac ab       	std	Y+52, r26	; 0x34
    237a:	bd ab       	std	Y+53, r27	; 0x35




    //storing the printed data
    i=0;
    237c:	19 a6       	std	Y+41, r1	; 0x29
    digit_count=0,float_count=0;
    237e:	18 a6       	std	Y+40, r1	; 0x28
    2380:	1f a2       	std	Y+39, r1	; 0x27
    2382:	37 c0       	rjmp	.+110    	; 0x23f2 <main+0x8da>
    while((int_sum/10)!=0){
    	printed_data[15-i]=((int_sum%10)+48);
    2384:	89 a5       	ldd	r24, Y+41	; 0x29
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	8f e0       	ldi	r24, 0x0F	; 15
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	8c 01       	movw	r16, r24
    2390:	02 1b       	sub	r16, r18
    2392:	13 0b       	sbc	r17, r19
    2394:	8e a9       	ldd	r24, Y+54	; 0x36
    2396:	9f a9       	ldd	r25, Y+55	; 0x37
    2398:	a8 ad       	ldd	r26, Y+56	; 0x38
    239a:	b9 ad       	ldd	r27, Y+57	; 0x39
    239c:	2a e0       	ldi	r18, 0x0A	; 10
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	28 2f       	mov	r18, r24
    23b2:	20 5d       	subi	r18, 0xD0	; 208
    23b4:	ce 01       	movw	r24, r28
    23b6:	8c 59       	subi	r24, 0x9C	; 156
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	fc 01       	movw	r30, r24
    23bc:	e0 0f       	add	r30, r16
    23be:	f1 1f       	adc	r31, r17
    23c0:	20 83       	st	Z, r18
    	int_sum=int_sum/10;
    23c2:	8e a9       	ldd	r24, Y+54	; 0x36
    23c4:	9f a9       	ldd	r25, Y+55	; 0x37
    23c6:	a8 ad       	ldd	r26, Y+56	; 0x38
    23c8:	b9 ad       	ldd	r27, Y+57	; 0x39
    23ca:	2a e0       	ldi	r18, 0x0A	; 10
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    23da:	da 01       	movw	r26, r20
    23dc:	c9 01       	movw	r24, r18
    23de:	8e ab       	std	Y+54, r24	; 0x36
    23e0:	9f ab       	std	Y+55, r25	; 0x37
    23e2:	a8 af       	std	Y+56, r26	; 0x38
    23e4:	b9 af       	std	Y+57, r27	; 0x39
    	i++;
    23e6:	89 a5       	ldd	r24, Y+41	; 0x29
    23e8:	8f 5f       	subi	r24, 0xFF	; 255
    23ea:	89 a7       	std	Y+41, r24	; 0x29
    	digit_count++;
    23ec:	88 a5       	ldd	r24, Y+40	; 0x28
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	88 a7       	std	Y+40, r24	; 0x28


    //storing the printed data
    i=0;
    digit_count=0,float_count=0;
    while((int_sum/10)!=0){
    23f2:	8e a9       	ldd	r24, Y+54	; 0x36
    23f4:	9f a9       	ldd	r25, Y+55	; 0x37
    23f6:	a8 ad       	ldd	r26, Y+56	; 0x38
    23f8:	b9 ad       	ldd	r27, Y+57	; 0x39
    23fa:	09 96       	adiw	r24, 0x09	; 9
    23fc:	a1 1d       	adc	r26, r1
    23fe:	b1 1d       	adc	r27, r1
    2400:	83 31       	cpi	r24, 0x13	; 19
    2402:	91 05       	cpc	r25, r1
    2404:	a1 05       	cpc	r26, r1
    2406:	b1 05       	cpc	r27, r1
    2408:	08 f0       	brcs	.+2      	; 0x240c <main+0x8f4>
    240a:	bc cf       	rjmp	.-136    	; 0x2384 <main+0x86c>
    	printed_data[15-i]=((int_sum%10)+48);
    	int_sum=int_sum/10;
    	i++;
    	digit_count++;
    }
		printed_data[15-digit_count]=((int_sum%10)+48);
    240c:	88 a5       	ldd	r24, Y+40	; 0x28
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	8f e0       	ldi	r24, 0x0F	; 15
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	8c 01       	movw	r16, r24
    2418:	02 1b       	sub	r16, r18
    241a:	13 0b       	sbc	r17, r19
    241c:	8e a9       	ldd	r24, Y+54	; 0x36
    241e:	9f a9       	ldd	r25, Y+55	; 0x37
    2420:	a8 ad       	ldd	r26, Y+56	; 0x38
    2422:	b9 ad       	ldd	r27, Y+57	; 0x39
    2424:	2a e0       	ldi	r18, 0x0A	; 10
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	28 2f       	mov	r18, r24
    243a:	20 5d       	subi	r18, 0xD0	; 208
    243c:	ce 01       	movw	r24, r28
    243e:	8c 59       	subi	r24, 0x9C	; 156
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	fc 01       	movw	r30, r24
    2444:	e0 0f       	add	r30, r16
    2446:	f1 1f       	adc	r31, r17
    2448:	20 83       	st	Z, r18


	i=0;
    244a:	19 a6       	std	Y+41, r1	; 0x29
    244c:	37 c0       	rjmp	.+110    	; 0x24bc <main+0x9a4>
	while((dec_sum/10)!=0){
	    	fprinted_data[3-i]=((dec_sum%10)+48);
    244e:	89 a5       	ldd	r24, Y+41	; 0x29
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	8c 01       	movw	r16, r24
    245a:	02 1b       	sub	r16, r18
    245c:	13 0b       	sbc	r17, r19
    245e:	8a a9       	ldd	r24, Y+50	; 0x32
    2460:	9b a9       	ldd	r25, Y+51	; 0x33
    2462:	ac a9       	ldd	r26, Y+52	; 0x34
    2464:	bd a9       	ldd	r27, Y+53	; 0x35
    2466:	2a e0       	ldi	r18, 0x0A	; 10
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	28 2f       	mov	r18, r24
    247c:	20 5d       	subi	r18, 0xD0	; 208
    247e:	ce 01       	movw	r24, r28
    2480:	8c 58       	subi	r24, 0x8C	; 140
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	fc 01       	movw	r30, r24
    2486:	e0 0f       	add	r30, r16
    2488:	f1 1f       	adc	r31, r17
    248a:	20 83       	st	Z, r18
	    	dec_sum=dec_sum/10;
    248c:	8a a9       	ldd	r24, Y+50	; 0x32
    248e:	9b a9       	ldd	r25, Y+51	; 0x33
    2490:	ac a9       	ldd	r26, Y+52	; 0x34
    2492:	bd a9       	ldd	r27, Y+53	; 0x35
    2494:	2a e0       	ldi	r18, 0x0A	; 10
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    24a4:	da 01       	movw	r26, r20
    24a6:	c9 01       	movw	r24, r18
    24a8:	8a ab       	std	Y+50, r24	; 0x32
    24aa:	9b ab       	std	Y+51, r25	; 0x33
    24ac:	ac ab       	std	Y+52, r26	; 0x34
    24ae:	bd ab       	std	Y+53, r27	; 0x35
	    	i++;
    24b0:	89 a5       	ldd	r24, Y+41	; 0x29
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	89 a7       	std	Y+41, r24	; 0x29
	    	float_count++;
    24b6:	8f a1       	ldd	r24, Y+39	; 0x27
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	8f a3       	std	Y+39, r24	; 0x27
    }
		printed_data[15-digit_count]=((int_sum%10)+48);


	i=0;
	while((dec_sum/10)!=0){
    24bc:	8a a9       	ldd	r24, Y+50	; 0x32
    24be:	9b a9       	ldd	r25, Y+51	; 0x33
    24c0:	ac a9       	ldd	r26, Y+52	; 0x34
    24c2:	bd a9       	ldd	r27, Y+53	; 0x35
    24c4:	09 96       	adiw	r24, 0x09	; 9
    24c6:	a1 1d       	adc	r26, r1
    24c8:	b1 1d       	adc	r27, r1
    24ca:	83 31       	cpi	r24, 0x13	; 19
    24cc:	91 05       	cpc	r25, r1
    24ce:	a1 05       	cpc	r26, r1
    24d0:	b1 05       	cpc	r27, r1
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <main+0x9be>
    24d4:	bc cf       	rjmp	.-136    	; 0x244e <main+0x936>
	    	fprinted_data[3-i]=((dec_sum%10)+48);
	    	dec_sum=dec_sum/10;
	    	i++;
	    	float_count++;
	    }
			fprinted_data[3-float_count]=((dec_sum%10)+48);
    24d6:	8f a1       	ldd	r24, Y+39	; 0x27
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	8c 01       	movw	r16, r24
    24e2:	02 1b       	sub	r16, r18
    24e4:	13 0b       	sbc	r17, r19
    24e6:	8a a9       	ldd	r24, Y+50	; 0x32
    24e8:	9b a9       	ldd	r25, Y+51	; 0x33
    24ea:	ac a9       	ldd	r26, Y+52	; 0x34
    24ec:	bd a9       	ldd	r27, Y+53	; 0x35
    24ee:	2a e0       	ldi	r18, 0x0A	; 10
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divmodsi4>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	28 2f       	mov	r18, r24
    2504:	20 5d       	subi	r18, 0xD0	; 208
    2506:	ce 01       	movw	r24, r28
    2508:	8c 58       	subi	r24, 0x8C	; 140
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	fc 01       	movw	r30, r24
    250e:	e0 0f       	add	r30, r16
    2510:	f1 1f       	adc	r31, r17
    2512:	20 83       	st	Z, r18

			 if((fprinted_data[3]=='0')&&(fprinted_data[2]=='0')&&(fprinted_data[1]=='0')&&(fprinted_data[0]=='0')){
    2514:	fe 01       	movw	r30, r28
    2516:	ec 58       	subi	r30, 0x8C	; 140
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	83 81       	ldd	r24, Z+3	; 0x03
    251c:	80 33       	cpi	r24, 0x30	; 48
    251e:	41 f5       	brne	.+80     	; 0x2570 <main+0xa58>
    2520:	fe 01       	movw	r30, r28
    2522:	ec 58       	subi	r30, 0x8C	; 140
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	80 33       	cpi	r24, 0x30	; 48
    252a:	11 f5       	brne	.+68     	; 0x2570 <main+0xa58>
    252c:	fe 01       	movw	r30, r28
    252e:	ec 58       	subi	r30, 0x8C	; 140
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	80 33       	cpi	r24, 0x30	; 48
    2536:	e1 f4       	brne	.+56     	; 0x2570 <main+0xa58>
    2538:	fe 01       	movw	r30, r28
    253a:	ec 58       	subi	r30, 0x8C	; 140
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	80 33       	cpi	r24, 0x30	; 48
    2542:	b1 f4       	brne	.+44     	; 0x2570 <main+0xa58>
						  			 				  fprinted_data[3]=' ';
    2544:	fe 01       	movw	r30, r28
    2546:	ec 58       	subi	r30, 0x8C	; 140
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 e2       	ldi	r24, 0x20	; 32
    254c:	83 83       	std	Z+3, r24	; 0x03
						  			 				  fprinted_data[2]=' ';
    254e:	fe 01       	movw	r30, r28
    2550:	ec 58       	subi	r30, 0x8C	; 140
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 e2       	ldi	r24, 0x20	; 32
    2556:	82 83       	std	Z+2, r24	; 0x02
						  			 				  fprinted_data[1]=' ';
    2558:	fe 01       	movw	r30, r28
    255a:	ec 58       	subi	r30, 0x8C	; 140
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 e2       	ldi	r24, 0x20	; 32
    2560:	81 83       	std	Z+1, r24	; 0x01
						  			 				  fprinted_data[0]=' ';
    2562:	fe 01       	movw	r30, r28
    2564:	ec 58       	subi	r30, 0x8C	; 140
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 e2       	ldi	r24, 0x20	; 32
    256a:	80 83       	st	Z, r24
						  			 			      foperand=3;
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	89 a3       	std	Y+33, r24	; 0x21
						  }

			 if((fprinted_data[3]=='0')&&(fprinted_data[2]=='0')&&(fprinted_data[1]=='0')){
    2570:	fe 01       	movw	r30, r28
    2572:	ec 58       	subi	r30, 0x8C	; 140
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	83 81       	ldd	r24, Z+3	; 0x03
    2578:	80 33       	cpi	r24, 0x30	; 48
    257a:	e9 f4       	brne	.+58     	; 0x25b6 <main+0xa9e>
    257c:	fe 01       	movw	r30, r28
    257e:	ec 58       	subi	r30, 0x8C	; 140
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	80 33       	cpi	r24, 0x30	; 48
    2586:	b9 f4       	brne	.+46     	; 0x25b6 <main+0xa9e>
    2588:	fe 01       	movw	r30, r28
    258a:	ec 58       	subi	r30, 0x8C	; 140
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	81 81       	ldd	r24, Z+1	; 0x01
    2590:	80 33       	cpi	r24, 0x30	; 48
    2592:	89 f4       	brne	.+34     	; 0x25b6 <main+0xa9e>
						 				  fprinted_data[3]=' ';
    2594:	fe 01       	movw	r30, r28
    2596:	ec 58       	subi	r30, 0x8C	; 140
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 e2       	ldi	r24, 0x20	; 32
    259c:	83 83       	std	Z+3, r24	; 0x03
						 				  fprinted_data[2]=' ';
    259e:	fe 01       	movw	r30, r28
    25a0:	ec 58       	subi	r30, 0x8C	; 140
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 e2       	ldi	r24, 0x20	; 32
    25a6:	82 83       	std	Z+2, r24	; 0x02
						 				  fprinted_data[1]=' ';foperand=1;
    25a8:	fe 01       	movw	r30, r28
    25aa:	ec 58       	subi	r30, 0x8C	; 140
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 e2       	ldi	r24, 0x20	; 32
    25b0:	81 83       	std	Z+1, r24	; 0x01
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	89 a3       	std	Y+33, r24	; 0x21
						 			  }

			 if((fprinted_data[3]=='0')&&(fprinted_data[2]=='0')){
    25b6:	fe 01       	movw	r30, r28
    25b8:	ec 58       	subi	r30, 0x8C	; 140
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	83 81       	ldd	r24, Z+3	; 0x03
    25be:	80 33       	cpi	r24, 0x30	; 48
    25c0:	91 f4       	brne	.+36     	; 0x25e6 <main+0xace>
    25c2:	fe 01       	movw	r30, r28
    25c4:	ec 58       	subi	r30, 0x8C	; 140
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	80 33       	cpi	r24, 0x30	; 48
    25cc:	61 f4       	brne	.+24     	; 0x25e6 <main+0xace>
							  fprinted_data[3]=' ';
    25ce:	fe 01       	movw	r30, r28
    25d0:	ec 58       	subi	r30, 0x8C	; 140
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 e2       	ldi	r24, 0x20	; 32
    25d6:	83 83       	std	Z+3, r24	; 0x03
							  fprinted_data[2]=' ';foperand=1;
    25d8:	fe 01       	movw	r30, r28
    25da:	ec 58       	subi	r30, 0x8C	; 140
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 e2       	ldi	r24, 0x20	; 32
    25e0:	82 83       	std	Z+2, r24	; 0x02
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	89 a3       	std	Y+33, r24	; 0x21
						  }

			 if(fprinted_data[3]=='0'){
    25e6:	fe 01       	movw	r30, r28
    25e8:	ec 58       	subi	r30, 0x8C	; 140
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	83 81       	ldd	r24, Z+3	; 0x03
    25ee:	80 33       	cpi	r24, 0x30	; 48
    25f0:	39 f4       	brne	.+14     	; 0x2600 <main+0xae8>
			   fprinted_data[3]=' ';foperand=1;
    25f2:	fe 01       	movw	r30, r28
    25f4:	ec 58       	subi	r30, 0x8C	; 140
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	83 83       	std	Z+3, r24	; 0x03
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	89 a3       	std	Y+33, r24	; 0x21





		CLCD_voidClearDisplay();
    2600:	0e 94 34 09 	call	0x1268	; 0x1268 <CLCD_voidClearDisplay>
		if(sum_tmp<0){
    2604:	6a ad       	ldd	r22, Y+58	; 0x3a
    2606:	7b ad       	ldd	r23, Y+59	; 0x3b
    2608:	8c ad       	ldd	r24, Y+60	; 0x3c
    260a:	9d ad       	ldd	r25, Y+61	; 0x3d
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2618:	88 23       	and	r24, r24
    261a:	1c f4       	brge	.+6      	; 0x2622 <main+0xb0a>
			CLCD_voidSendData('-');
    261c:	8d e2       	ldi	r24, 0x2D	; 45
    261e:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
		}
    for(i=(15-digit_count);i<=15;i++){
    2622:	8f e0       	ldi	r24, 0x0F	; 15
    2624:	98 a5       	ldd	r25, Y+40	; 0x28
    2626:	89 1b       	sub	r24, r25
    2628:	89 a7       	std	Y+41, r24	; 0x29
    262a:	1a c0       	rjmp	.+52     	; 0x2660 <main+0xb48>
        	CLCD_voidSendData(printed_data[i]);
    262c:	89 a5       	ldd	r24, Y+41	; 0x29
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	ce 01       	movw	r24, r28
    2634:	8c 59       	subi	r24, 0x9C	; 156
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	80 81       	ld	r24, Z
    2640:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
        	printed_data[i]='0';
    2644:	89 a5       	ldd	r24, Y+41	; 0x29
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	ce 01       	movw	r24, r28
    264c:	8c 59       	subi	r24, 0x9C	; 156
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	80 e3       	ldi	r24, 0x30	; 48
    2658:	80 83       	st	Z, r24

		CLCD_voidClearDisplay();
		if(sum_tmp<0){
			CLCD_voidSendData('-');
		}
    for(i=(15-digit_count);i<=15;i++){
    265a:	89 a5       	ldd	r24, Y+41	; 0x29
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	89 a7       	std	Y+41, r24	; 0x29
    2660:	89 a5       	ldd	r24, Y+41	; 0x29
    2662:	80 31       	cpi	r24, 0x10	; 16
    2664:	18 f3       	brcs	.-58     	; 0x262c <main+0xb14>
        	CLCD_voidSendData(printed_data[i]);
        	printed_data[i]='0';
        }
   if(((foperand!=3)))
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	83 30       	cpi	r24, 0x03	; 3
    266a:	19 f0       	breq	.+6      	; 0x2672 <main+0xb5a>
    CLCD_voidSendData('.');
    266c:	8e e2       	ldi	r24, 0x2E	; 46
    266e:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>

    for(i=0;i<=3;i++){
    2672:	19 a6       	std	Y+41, r1	; 0x29
    2674:	26 c0       	rjmp	.+76     	; 0x26c2 <main+0xbaa>
    	if(fprinted_data[i]!=' ')
    2676:	89 a5       	ldd	r24, Y+41	; 0x29
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	ce 01       	movw	r24, r28
    267e:	8c 58       	subi	r24, 0x8C	; 140
    2680:	9f 4f       	sbci	r25, 0xFF	; 255
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	80 81       	ld	r24, Z
    268a:	80 32       	cpi	r24, 0x20	; 32
    268c:	61 f0       	breq	.+24     	; 0x26a6 <main+0xb8e>
            	CLCD_voidSendData(fprinted_data[i]);
    268e:	89 a5       	ldd	r24, Y+41	; 0x29
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	ce 01       	movw	r24, r28
    2696:	8c 58       	subi	r24, 0x8C	; 140
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	fc 01       	movw	r30, r24
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	80 81       	ld	r24, Z
    26a2:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidSendData>
            	fprinted_data[i]='0';
    26a6:	89 a5       	ldd	r24, Y+41	; 0x29
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	ce 01       	movw	r24, r28
    26ae:	8c 58       	subi	r24, 0x8C	; 140
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	fc 01       	movw	r30, r24
    26b4:	e2 0f       	add	r30, r18
    26b6:	f3 1f       	adc	r31, r19
    26b8:	80 e3       	ldi	r24, 0x30	; 48
    26ba:	80 83       	st	Z, r24
        	printed_data[i]='0';
        }
   if(((foperand!=3)))
    CLCD_voidSendData('.');

    for(i=0;i<=3;i++){
    26bc:	89 a5       	ldd	r24, Y+41	; 0x29
    26be:	8f 5f       	subi	r24, 0xFF	; 255
    26c0:	89 a7       	std	Y+41, r24	; 0x29
    26c2:	89 a5       	ldd	r24, Y+41	; 0x29
    26c4:	84 30       	cpi	r24, 0x04	; 4
    26c6:	b8 f2       	brcs	.-82     	; 0x2676 <main+0xb5e>
            	CLCD_voidSendData(fprinted_data[i]);
            	fprinted_data[i]='0';
            }


    press=0;
    26c8:	18 a2       	std	Y+32, r1	; 0x20
    operand=0;
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	8a a3       	std	Y+34, r24	; 0x22
    26d4:	9b a3       	std	Y+35, r25	; 0x23
    26d6:	ac a3       	std	Y+36, r26	; 0x24
    26d8:	bd a3       	std	Y+37, r27	; 0x25
    foperand=0;
    26da:	19 a2       	std	Y+33, r1	; 0x21
    operation=0;
    26dc:	1e a2       	std	Y+38, r1	; 0x26
    digit_count=0;
    26de:	18 a6       	std	Y+40, r1	; 0x28
    float_count=0;
    26e0:	1f a2       	std	Y+39, r1	; 0x27
    float_state=0;
    26e2:	1f 8e       	std	Y+31, r1	; 0x1f
    neg_flag=0;
    26e4:	fe 01       	movw	r30, r28
    26e6:	ed 5b       	subi	r30, 0xBD	; 189
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	10 82       	st	Z, r1
    err_flag=0;}
    26ec:	fe 01       	movw	r30, r28
    26ee:	ee 5b       	subi	r30, 0xBE	; 190
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	10 82       	st	Z, r1
    26f4:	fb ca       	rjmp	.-2570   	; 0x1cec <main+0x1d4>

000026f6 <__mulsi3>:
    26f6:	62 9f       	mul	r22, r18
    26f8:	d0 01       	movw	r26, r0
    26fa:	73 9f       	mul	r23, r19
    26fc:	f0 01       	movw	r30, r0
    26fe:	82 9f       	mul	r24, r18
    2700:	e0 0d       	add	r30, r0
    2702:	f1 1d       	adc	r31, r1
    2704:	64 9f       	mul	r22, r20
    2706:	e0 0d       	add	r30, r0
    2708:	f1 1d       	adc	r31, r1
    270a:	92 9f       	mul	r25, r18
    270c:	f0 0d       	add	r31, r0
    270e:	83 9f       	mul	r24, r19
    2710:	f0 0d       	add	r31, r0
    2712:	74 9f       	mul	r23, r20
    2714:	f0 0d       	add	r31, r0
    2716:	65 9f       	mul	r22, r21
    2718:	f0 0d       	add	r31, r0
    271a:	99 27       	eor	r25, r25
    271c:	72 9f       	mul	r23, r18
    271e:	b0 0d       	add	r27, r0
    2720:	e1 1d       	adc	r30, r1
    2722:	f9 1f       	adc	r31, r25
    2724:	63 9f       	mul	r22, r19
    2726:	b0 0d       	add	r27, r0
    2728:	e1 1d       	adc	r30, r1
    272a:	f9 1f       	adc	r31, r25
    272c:	bd 01       	movw	r22, r26
    272e:	cf 01       	movw	r24, r30
    2730:	11 24       	eor	r1, r1
    2732:	08 95       	ret

00002734 <__divmodsi4>:
    2734:	97 fb       	bst	r25, 7
    2736:	09 2e       	mov	r0, r25
    2738:	05 26       	eor	r0, r21
    273a:	0e d0       	rcall	.+28     	; 0x2758 <__divmodsi4_neg1>
    273c:	57 fd       	sbrc	r21, 7
    273e:	04 d0       	rcall	.+8      	; 0x2748 <__divmodsi4_neg2>
    2740:	14 d0       	rcall	.+40     	; 0x276a <__udivmodsi4>
    2742:	0a d0       	rcall	.+20     	; 0x2758 <__divmodsi4_neg1>
    2744:	00 1c       	adc	r0, r0
    2746:	38 f4       	brcc	.+14     	; 0x2756 <__divmodsi4_exit>

00002748 <__divmodsi4_neg2>:
    2748:	50 95       	com	r21
    274a:	40 95       	com	r20
    274c:	30 95       	com	r19
    274e:	21 95       	neg	r18
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	4f 4f       	sbci	r20, 0xFF	; 255
    2754:	5f 4f       	sbci	r21, 0xFF	; 255

00002756 <__divmodsi4_exit>:
    2756:	08 95       	ret

00002758 <__divmodsi4_neg1>:
    2758:	f6 f7       	brtc	.-4      	; 0x2756 <__divmodsi4_exit>
    275a:	90 95       	com	r25
    275c:	80 95       	com	r24
    275e:	70 95       	com	r23
    2760:	61 95       	neg	r22
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	8f 4f       	sbci	r24, 0xFF	; 255
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	08 95       	ret

0000276a <__udivmodsi4>:
    276a:	a1 e2       	ldi	r26, 0x21	; 33
    276c:	1a 2e       	mov	r1, r26
    276e:	aa 1b       	sub	r26, r26
    2770:	bb 1b       	sub	r27, r27
    2772:	fd 01       	movw	r30, r26
    2774:	0d c0       	rjmp	.+26     	; 0x2790 <__udivmodsi4_ep>

00002776 <__udivmodsi4_loop>:
    2776:	aa 1f       	adc	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	ee 1f       	adc	r30, r30
    277c:	ff 1f       	adc	r31, r31
    277e:	a2 17       	cp	r26, r18
    2780:	b3 07       	cpc	r27, r19
    2782:	e4 07       	cpc	r30, r20
    2784:	f5 07       	cpc	r31, r21
    2786:	20 f0       	brcs	.+8      	; 0x2790 <__udivmodsi4_ep>
    2788:	a2 1b       	sub	r26, r18
    278a:	b3 0b       	sbc	r27, r19
    278c:	e4 0b       	sbc	r30, r20
    278e:	f5 0b       	sbc	r31, r21

00002790 <__udivmodsi4_ep>:
    2790:	66 1f       	adc	r22, r22
    2792:	77 1f       	adc	r23, r23
    2794:	88 1f       	adc	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	1a 94       	dec	r1
    279a:	69 f7       	brne	.-38     	; 0x2776 <__udivmodsi4_loop>
    279c:	60 95       	com	r22
    279e:	70 95       	com	r23
    27a0:	80 95       	com	r24
    27a2:	90 95       	com	r25
    27a4:	9b 01       	movw	r18, r22
    27a6:	ac 01       	movw	r20, r24
    27a8:	bd 01       	movw	r22, r26
    27aa:	cf 01       	movw	r24, r30
    27ac:	08 95       	ret

000027ae <__prologue_saves__>:
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	ca 1b       	sub	r28, r26
    27d8:	db 0b       	sbc	r29, r27
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	09 94       	ijmp

000027e6 <__epilogue_restores__>:
    27e6:	2a 88       	ldd	r2, Y+18	; 0x12
    27e8:	39 88       	ldd	r3, Y+17	; 0x11
    27ea:	48 88       	ldd	r4, Y+16	; 0x10
    27ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f8:	b9 84       	ldd	r11, Y+9	; 0x09
    27fa:	c8 84       	ldd	r12, Y+8	; 0x08
    27fc:	df 80       	ldd	r13, Y+7	; 0x07
    27fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2800:	fd 80       	ldd	r15, Y+5	; 0x05
    2802:	0c 81       	ldd	r16, Y+4	; 0x04
    2804:	1b 81       	ldd	r17, Y+3	; 0x03
    2806:	aa 81       	ldd	r26, Y+2	; 0x02
    2808:	b9 81       	ldd	r27, Y+1	; 0x01
    280a:	ce 0f       	add	r28, r30
    280c:	d1 1d       	adc	r29, r1
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	ed 01       	movw	r28, r26
    281a:	08 95       	ret

0000281c <_exit>:
    281c:	f8 94       	cli

0000281e <__stop_program>:
    281e:	ff cf       	rjmp	.-2      	; 0x281e <__stop_program>
